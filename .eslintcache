[{"D:\\fuzzy work\\mes_web\\src\\index.tsx":"1","D:\\fuzzy work\\mes_web\\src\\App.tsx":"2","D:\\fuzzy work\\mes_web\\src\\routes\\index.ts":"3","D:\\fuzzy work\\mes_web\\src\\components\\index.ts":"4","D:\\fuzzy work\\mes_web\\src\\tools\\index.ts":"5","D:\\fuzzy work\\mes_web\\src\\views\\index.ts":"6","D:\\fuzzy work\\mes_web\\src\\components\\Frame\\index.tsx":"7","D:\\fuzzy work\\mes_web\\src\\components\\PreviewForm\\index.tsx":"8","D:\\fuzzy work\\mes_web\\src\\components\\Loading\\index.tsx":"9","D:\\fuzzy work\\mes_web\\src\\views\\notFound\\index.tsx":"10","D:\\fuzzy work\\mes_web\\src\\views\\productionOrders\\index.tsx":"11","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\partConfiguration\\index.tsx":"12","D:\\fuzzy work\\mes_web\\src\\views\\productionOrders\\productionOrdersAdd\\index.tsx":"13","D:\\fuzzy work\\mes_web\\src\\views\\staffManagement\\index.tsx":"14","D:\\fuzzy work\\mes_web\\src\\views\\ordersStandingBook\\index.tsx":"15","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\processConfiguration\\index.tsx":"16","D:\\fuzzy work\\mes_web\\src\\views\\login\\index.tsx":"17","D:\\fuzzy work\\mes_web\\src\\views\\staffManagement\\reducer.ts":"18","D:\\fuzzy work\\mes_web\\src\\views\\staffManagement\\typings.ts":"19","D:\\fuzzy work\\mes_web\\src\\views\\productionOrders\\productionOrdersAddWork\\index.tsx":"20","D:\\fuzzy work\\mes_web\\src\\api\\login.ts":"21","D:\\fuzzy work\\mes_web\\src\\api\\index.ts":"22","D:\\fuzzy work\\mes_web\\src\\tools\\aes.ts":"23","D:\\fuzzy work\\mes_web\\src\\api\\staff.ts":"24","D:\\fuzzy work\\mes_web\\src\\api\\product.ts":"25","D:\\fuzzy work\\mes_web\\src\\views\\productionOrders\\reducer.ts":"26","D:\\fuzzy work\\mes_web\\src\\views\\productionOrders\\typings.ts":"27","D:\\fuzzy work\\mes_web\\src\\views\\productionOrders\\productionOrdersAdd\\reducer.ts":"28","D:\\fuzzy work\\mes_web\\src\\views\\productionOrders\\productionOrdersAdd\\typings.ts":"29","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\partConfiguration\\partConfigurationAdd\\index.tsx":"30","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\partConfiguration\\partConfigurationAdd\\typings.ts":"31","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\partConfiguration\\partConfigurationAdd\\reducer.ts":"32","D:\\fuzzy work\\mes_web\\src\\api\\integratedconfig.ts":"33","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\partConfiguration\\reducer.ts":"34","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\partConfiguration\\typings.ts":"35","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\formConfiguration\\index.tsx":"36","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\formConfiguration\\formConfigurationAdd\\index.tsx":"37","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\formConfiguration\\formConfigurationAdd\\reducer.ts":"38","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\formConfiguration\\formConfigurationAdd\\typings.ts":"39","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\formConfiguration\\reducer.ts":"40","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\formConfiguration\\typings.ts":"41","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\processConfiguration\\processConfigurationAdd\\index.tsx":"42","D:\\fuzzy work\\mes_web\\src\\views\\todoThings\\checkForm\\index.tsx":"43","D:\\fuzzy work\\mes_web\\src\\views\\todoThings\\checkForm\\checkForm_detail\\index.tsx":"44","D:\\fuzzy work\\mes_web\\src\\views\\productionOrders\\productionOrdersAddWork\\reducer.ts":"45","D:\\fuzzy work\\mes_web\\src\\views\\productionOrders\\productionOrdersAddWork\\typings.ts":"46","D:\\fuzzy work\\mes_web\\src\\views\\ordersStandingBook\\reducer.ts":"47","D:\\fuzzy work\\mes_web\\src\\views\\ordersStandingBook\\typings.ts":"48","D:\\fuzzy work\\mes_web\\src\\api\\orderbook.ts":"49","D:\\fuzzy work\\mes_web\\src\\components\\UserSelect\\index.tsx":"50","D:\\fuzzy work\\mes_web\\src\\components\\DeviceTypesSelect\\index.tsx":"51","D:\\fuzzy work\\mes_web\\src\\components\\PositionSelect\\index.tsx":"52","D:\\fuzzy work\\mes_web\\src\\hooks\\index.ts":"53","D:\\fuzzy work\\mes_web\\src\\hooks\\useDeviceTypes.ts":"54","D:\\fuzzy work\\mes_web\\src\\hooks\\useUsers.ts":"55","D:\\fuzzy work\\mes_web\\src\\hooks\\usePositions.ts":"56","D:\\fuzzy work\\mes_web\\src\\components\\PartTable\\index.tsx":"57"},{"size":874,"mtime":1616643254940,"results":"58","hashOfConfig":"59"},{"size":1567,"mtime":1620615122634,"results":"60","hashOfConfig":"59"},{"size":3346,"mtime":1615515624059,"results":"61","hashOfConfig":"59"},{"size":382,"mtime":1618207328883,"results":"62","hashOfConfig":"59"},{"size":2728,"mtime":1619320861245,"results":"63","hashOfConfig":"59"},{"size":1814,"mtime":1615514754199,"results":"64","hashOfConfig":"59"},{"size":4959,"mtime":1617845888171,"results":"65","hashOfConfig":"59"},{"size":7497,"mtime":1620615939646,"results":"66","hashOfConfig":"59"},{"size":258,"mtime":1609119180520,"results":"67","hashOfConfig":"59"},{"size":559,"mtime":1609119180538,"results":"68","hashOfConfig":"59"},{"size":10160,"mtime":1617932344509,"results":"69","hashOfConfig":"59"},{"size":7523,"mtime":1617931322371,"results":"70","hashOfConfig":"59"},{"size":10583,"mtime":1617932550681,"results":"71","hashOfConfig":"59"},{"size":7355,"mtime":1618448368130,"results":"72","hashOfConfig":"59"},{"size":7322,"mtime":1620615848114,"results":"73","hashOfConfig":"59"},{"size":4439,"mtime":1618208678584,"results":"74","hashOfConfig":"59"},{"size":2839,"mtime":1616552161803,"results":"75","hashOfConfig":"59"},{"size":377,"mtime":1613613143952,"results":"76","hashOfConfig":"59"},{"size":636,"mtime":1614737236043,"results":"77","hashOfConfig":"59"},{"size":15638,"mtime":1617933501273,"results":"78","hashOfConfig":"59"},{"size":220,"mtime":1616490008239,"results":"79","hashOfConfig":"59"},{"size":1362,"mtime":1619761616966,"results":"80","hashOfConfig":"59"},{"size":1359,"mtime":1616490191645,"results":"81","hashOfConfig":"59"},{"size":134,"mtime":1616552302815,"results":"82","hashOfConfig":"59"},{"size":2835,"mtime":1617867953553,"results":"83","hashOfConfig":"59"},{"size":1494,"mtime":1617844466333,"results":"84","hashOfConfig":"59"},{"size":653,"mtime":1617844478107,"results":"85","hashOfConfig":"59"},{"size":945,"mtime":1617846258920,"results":"86","hashOfConfig":"59"},{"size":361,"mtime":1617846267217,"results":"87","hashOfConfig":"59"},{"size":6584,"mtime":1618207539160,"results":"88","hashOfConfig":"59"},{"size":134,"mtime":1617673962142,"results":"89","hashOfConfig":"59"},{"size":324,"mtime":1614935750250,"results":"90","hashOfConfig":"59"},{"size":3035,"mtime":1618210758163,"results":"91","hashOfConfig":"59"},{"size":1063,"mtime":1617676596929,"results":"92","hashOfConfig":"59"},{"size":563,"mtime":1617676522837,"results":"93","hashOfConfig":"59"},{"size":8078,"mtime":1617934092934,"results":"94","hashOfConfig":"59"},{"size":18212,"mtime":1618198045097,"results":"95","hashOfConfig":"59"},{"size":1162,"mtime":1618197330401,"results":"96","hashOfConfig":"59"},{"size":478,"mtime":1618196296289,"results":"97","hashOfConfig":"59"},{"size":1083,"mtime":1617699960597,"results":"98","hashOfConfig":"59"},{"size":483,"mtime":1617699908922,"results":"99","hashOfConfig":"59"},{"size":8266,"mtime":1618211159976,"results":"100","hashOfConfig":"59"},{"size":4898,"mtime":1615527753837,"results":"101","hashOfConfig":"59"},{"size":4287,"mtime":1619407217356,"results":"102","hashOfConfig":"59"},{"size":964,"mtime":1617861027344,"results":"103","hashOfConfig":"59"},{"size":357,"mtime":1617861054469,"results":"104","hashOfConfig":"59"},{"size":977,"mtime":1617346886246,"results":"105","hashOfConfig":"59"},{"size":756,"mtime":1617175345426,"results":"106","hashOfConfig":"59"},{"size":550,"mtime":1617174135966,"results":"107","hashOfConfig":"59"},{"size":1322,"mtime":1617863036294,"results":"108","hashOfConfig":"59"},{"size":1465,"mtime":1617868145141,"results":"109","hashOfConfig":"59"},{"size":1214,"mtime":1617869987248,"results":"110","hashOfConfig":"59"},{"size":168,"mtime":1617932000184,"results":"111","hashOfConfig":"59"},{"size":485,"mtime":1617931711168,"results":"112","hashOfConfig":"59"},{"size":571,"mtime":1617931771595,"results":"113","hashOfConfig":"59"},{"size":467,"mtime":1617932098637,"results":"114","hashOfConfig":"59"},{"size":2746,"mtime":1618207511093,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"119"},"12tl25p",{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"119"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"119"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"119"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"119"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"119"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"119"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"119"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"119"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"160","usedDeprecatedRules":"119"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"119"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"185"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"119"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"119"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"119"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":2,"source":"207","usedDeprecatedRules":"119"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"119"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"119"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"119"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"119"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"238","usedDeprecatedRules":"119"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"241","usedDeprecatedRules":"119"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"244","usedDeprecatedRules":"119"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},"D:\\fuzzy work\\mes_web\\src\\index.tsx",["255"],"import React, { Suspense } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\nimport { ConfigProvider } from 'antd';\r\nimport zhCN from 'antd/lib/locale/zh_CN';\r\nimport { mainRoutes } from './routes'\r\nimport moment from 'moment';\r\nimport 'moment/locale/zh-cn';\r\n\r\nmoment.locale('zh-cn');\r\n\r\nReactDOM.render(\r\n  <ConfigProvider locale={zhCN}>\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <Router>\r\n        <Switch>\r\n          {\r\n            mainRoutes.map(route => (\r\n              <Route path={route.pathName} component={route.component} key={route.pathName} />\r\n            ))\r\n          }\r\n          <Route path=\"/\" component={App} />\r\n        </Switch>\r\n      </Router>\r\n    </Suspense>\r\n  </ConfigProvider>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n",["256","257"],"D:\\fuzzy work\\mes_web\\src\\App.tsx",["258"],"import './App.less'\r\nimport { Frame, Loading } from './components';\r\nimport { Suspense, useState, FC, ReactElement } from 'react'\r\nimport { adminRoutes } from './routes'\r\nimport { Route, Switch, Redirect } from 'react-router-dom'\r\nimport { insertUserId } from './tools'\r\n\r\nconst App: FC = (): ReactElement => {\r\n  const [isLogin, setIsLogin] = useState<boolean>(localStorage.getItem('key') ? true : false)\r\n\r\n  return (\r\n    isLogin\r\n      ?\r\n      <Frame>\r\n        <Suspense fallback={<Loading />}>\r\n          <Switch>\r\n            {\r\n              adminRoutes.map(route => (\r\n                route.isSubMenu ?\r\n                  route.subMenu.map(subRoute => (\r\n                    <Route\r\n                      path={subRoute.pathName}\r\n                      key={subRoute.pathName}\r\n                      component={subRoute.component}\r\n                      exact={subRoute.exact}\r\n                    />\r\n                  ))\r\n                  :\r\n                  <Route\r\n                    path={route.pathName}\r\n                    key={route.pathName}\r\n                    component={route.component}\r\n                    exact={route.exact}\r\n                  />\r\n              ))\r\n            }\r\n            <Redirect\r\n              // you need insert userid here\r\n              to={insertUserId(adminRoutes[0].pathName, 'my-userid')}\r\n              from=\"/\"\r\n              exact />\r\n            <Redirect to=\"/404\" />\r\n          </Switch>\r\n        </Suspense>\r\n      </Frame>\r\n      :\r\n      <Redirect to=\"/login\" />\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","D:\\fuzzy work\\mes_web\\src\\routes\\index.ts",[],"D:\\fuzzy work\\mes_web\\src\\components\\index.ts",[],"D:\\fuzzy work\\mes_web\\src\\tools\\index.ts",["259"],"// insert userID\r\n// parameter: [需要修改的path， 需要插入的userid]\r\n// attention: 只对routeArr第二位做修改\r\nexport const insertUserId = (prevPath: string, userId: string): string => {\r\n    let routeArr: Array<string> = prevPath.split('/')\r\n    routeArr.splice(1, 1, userId)\r\n    return routeArr.join('/')\r\n}\r\n\r\nexport const cutURLForSelectedKeys = (url: string): string => {\r\n    let routeArr: Array<string> = url.split('/')\r\n    routeArr.length = 3;\r\n    return routeArr.join('/')\r\n}\r\n\r\nexport const isIFrame = (input: HTMLElement | null): input is HTMLIFrameElement => {\r\n    return input !== null && input.tagName === 'IFRAME';\r\n}\r\n\r\nexport const getSearchObj = (str: string): { [key: string]: any } => {\r\n    if (!str) return\r\n    let target = {}\r\n    let n = str.split('?')[1].split('&')\r\n    n.map((item) => {\r\n        let m = item.split('=')\r\n        target[m[0]] = m[1]\r\n    })\r\n    return target\r\n}\r\n\r\nexport const getDataSource = (json) => {\r\n    let target = []\r\n    json.forEach((item, index) => {\r\n        target.push({\r\n            key: index,\r\n            cpspcodeH: item[\"母件编码 *(cpspcode)H\"] || \"\",\r\n            cinvnameH: item[\"母件名称 *(cinvname)H\"] || \"\",\r\n            cinvstdH: item[\"规格型号(cinvstd)H\"] || \"\",\r\n            bexpandH: item[\"是否展开(bexpand)H\"] || \"\",\r\n            cdepnameH: item[\"部门名称(cdepname)H\"] || \"\",\r\n            cdepcodeH: item[\"部门编码(cdepcode)H\"] || \"\",\r\n            bmrcbbomH: item[\"默认成本BOM(bmrcbbom)H\"] || \"\",\r\n            csocodeH: item[\"版本号(csocode)H\"] || \"\",\r\n            cmemoH: item[\"备注(cmemo)H\"] || \"\",\r\n            cpscode: item[\"子件编码(cpscode)\"] || \"\",\r\n            cinvname: item[\"子件名称(cinvname)\"] || \"\",\r\n            cinvstd: item[\"规格型号(cinvstd)\"] || \"\",\r\n            csocode: item[\"版本号(csocode)\"] || \"\",\r\n            ccomunitname: item[\"主计量(ccomunitname)\"] || \"\",\r\n            ipsquantity: item[\"基本用量分子(ipsquantity)\"] || \"\",\r\n            tdqtyd: item[\"基本用量分母(tdqtyd)\"] || \"\",\r\n            fbzdj: item[\"标准单价(fbzdj)\"] || \"\",\r\n            fbzwlcb: item[\"标准物料成本(fbzwlcb)\"] || \"\",\r\n            iwasterate: item[\"损耗率%(iwasterate)\"] || \"\",\r\n            cwhname: item[\"存放仓库(cwhname)\"] || \"\",\r\n            cpersonname: item[\"库管员(cpersonname)\"] || \"\",\r\n            usedept: item[\"用料车间(usedept)\"] || \"\",\r\n            wiptype: item[\"物料类型(wiptype)\"] || \"\",\r\n            replaceflag: item[\"替代标示(replaceflag)\"] || \"\",\r\n            ginvpicture: item[\"图片(ginvpicture)\"] || \"\",\r\n        })\r\n    })\r\n\r\n    return target\r\n}\r\n\r\nexport const transformBase64ToPicture = (base64Str) => {\r\n\r\n}","D:\\fuzzy work\\mes_web\\src\\views\\index.ts",[],"D:\\fuzzy work\\mes_web\\src\\components\\Frame\\index.tsx",[],"D:\\fuzzy work\\mes_web\\src\\components\\PreviewForm\\index.tsx",[],"D:\\fuzzy work\\mes_web\\src\\components\\Loading\\index.tsx",[],"D:\\fuzzy work\\mes_web\\src\\views\\notFound\\index.tsx",[],"D:\\fuzzy work\\mes_web\\src\\views\\productionOrders\\index.tsx",["260","261","262","263","264","265"],"import React, { FC, ReactElement, useEffect, useReducer, useState } from 'react'\r\nimport {\r\n    Card,\r\n    Button,\r\n    Form,\r\n    Input,\r\n    DatePicker,\r\n    Select,\r\n    Divider,\r\n    Table,\r\n    Breadcrumb,\r\n    Space,\r\n    Popconfirm,\r\n    message\r\n} from 'antd'\r\nimport {\r\n    PlusOutlined,\r\n    ExclamationCircleOutlined\r\n} from '@ant-design/icons'\r\nimport './production_order.less'\r\nimport { ISearch } from './typings'\r\nimport moment from 'moment';\r\nimport { getProductOrdersList, deleteProductOrder } from '../../api/product'\r\nimport { productOrderListReducer } from './reducer'\r\nimport { ACTION_TYPE } from './typings'\r\nimport { useUsers } from '../../hooks'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nconst ProductionOrders: FC = (props: any): ReactElement => {\r\n    const [form] = Form.useForm()\r\n    const [users, updateUsers] = useUsers([])\r\n    const [_state, dispatch] = useReducer(productOrderListReducer, {\r\n        tableData: [],\r\n        page: 1,\r\n        limit: 10,\r\n        total: 0,\r\n        searchInfo: {\r\n            orderNo: null,\r\n            startTime: null,\r\n            endTime: null,\r\n            chargeUserId: null\r\n        },\r\n        freshFlag: false\r\n    })\r\n\r\n    const onFinish = (values: ISearch) => {\r\n        let { orderNo, chargeUserId, orderTime } = values;\r\n        console.log(chargeUserId)\r\n        dispatch({\r\n            type: ACTION_TYPE.SET_SEARCH_INFO,\r\n            payload: {\r\n                orderNo,\r\n                startTime: orderTime ? orderTime[0].toJSON() : '',\r\n                endTime: orderTime ? orderTime[1].toJSON() : '',\r\n                chargeUserId\r\n            }\r\n        })\r\n    }\r\n\r\n    const add_new_order = () => {\r\n        // you need insert userid here\r\n        props.history.push('/' + 'my-userid' + '/po/edit_order')\r\n    }\r\n\r\n    const editRender = (record) => {\r\n\r\n        const handleClickEdit = () => {\r\n            props.history.push('/' + 'my-userid' + '/po/edit_order/?orderId=' + record.Id)\r\n        }\r\n        const handleDelete = () => {\r\n            deleteProductOrder(record.Id).then((res: any) => {\r\n                if (res.code === 200) {\r\n                    message.success('删除成功！')\r\n                    dispatch({\r\n                        type: ACTION_TYPE.CHANGE_FRESH_FLAG\r\n                    })\r\n                }\r\n            })\r\n        }\r\n\r\n        return (\r\n            <Space size={16}>\r\n                <Button onClick={handleClickEdit} type=\"primary\" size=\"small\" shape=\"round\">编辑</Button>\r\n                <Popconfirm title=\"确认删除？\" icon={<ExclamationCircleOutlined style={{ color: 'red' }} />} onConfirm={handleDelete}>\r\n                    <Button danger type=\"primary\" size=\"small\" shape=\"round\">删除</Button>\r\n                </Popconfirm>\r\n            </Space>\r\n        )\r\n    }\r\n\r\n    const columns = [\r\n        { title: '生产订单编号', dataIndex: 'OrderNo', key: 'OrderNo' },\r\n        { title: '产品数量', dataIndex: 'ProductCount', key: 'ProductCount' },\r\n        { title: '开单时间', dataIndex: 'CreateTime', key: 'CreateTime' },\r\n        { title: '计划完成时间', dataIndex: 'PlanTime', key: 'PlanTime' },\r\n        { title: '是否加急', dataIndex: 'IsUrgent', key: 'IsUrgent' },\r\n        { title: '订单负责人', dataIndex: 'ChargeUser', key: 'ChargeUser' },\r\n        { title: '操作', key: 'OrderAction', render: editRender, fixed: 'right' as 'right' },\r\n    ]\r\n\r\n    const expandedRowRender = (record) => {\r\n        const columns = [\r\n            { title: '产品序列号', dataIndex: 'SerialNo', key: 'SerialNo' },\r\n            { title: 'TerminalID', dataIndex: 'TerminalId', key: 'TerminalId' },\r\n            { title: '产品料号', dataIndex: 'MaterialCode', key: 'MaterialCode' },\r\n            { title: '产品名称', dataIndex: 'Name', key: 'Name' },\r\n            { title: '开始时间', dataIndex: 'CreateTime', key: 'CreateTime' },\r\n            { title: '计划完成时间', dataIndex: 'PlanTime', key: 'PlanTime' },\r\n        ]\r\n\r\n        let data = record.Devices.map((item, index) => ({\r\n            ...item,\r\n            CreateTime: moment(item.CreateTime).format('YYYY年 M月D日'),\r\n            PlanTime: moment(item.PlanTime).format('YYYY年 M月D日'),\r\n            key: index\r\n        }))\r\n\r\n        return <Table className=\"sub-table\" bordered={true} columns={columns} dataSource={data} pagination={false} />;\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('search data ...')\r\n        getProductOrdersList({\r\n            startTime: _state.searchInfo.startTime || '',\r\n            endTime: _state.searchInfo.endTime || '',\r\n            orderNo: _state.searchInfo.orderNo || '',\r\n            chargeUserId: _state.searchInfo.chargeUserId || '',\r\n            page: _state.page,\r\n            limit: _state.limit\r\n        }).then((res: any) => {\r\n            if (res.code === 200) {\r\n                let n = res.data.map(item => ({\r\n                    ...item,\r\n                    CreateTime: moment(item.CreateTime).format('YYYY年 M月D日'),\r\n                    PlanTime: moment(item.PlanTime).format('YYYY年 M月D日'),\r\n                    ProductCount: item.Devices.length,\r\n                    key: item.Id,\r\n                    IsUrgent: item.isUrgent ? <span style={{ color: 'red' }}>加急</span> : <span style={{ color: 'green' }}>正常</span>\r\n                }))\r\n                dispatch({\r\n                    type: ACTION_TYPE.SET_ORDER_LIST,\r\n                    payload: {\r\n                        tableData: n,\r\n                        total: res.count\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }, [_state.page, _state.limit, _state.searchInfo.orderNo, _state.searchInfo.startTime, _state.searchInfo.endTime, _state.searchInfo.chargeUserId, _state.freshFlag])\r\n\r\n    return (\r\n        <>\r\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\r\n                <div className=\"bread-area\">\r\n                    <div style={{ paddingRight: '5px' }}>当前路径：</div>\r\n                    <Breadcrumb separator=\">\">\r\n                        <Breadcrumb.Item>\r\n                            <span className=\"bread-item\">生产订单列表</span>\r\n                        </Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                </div>\r\n                <Card\r\n                    title=\"生产订单列表\"\r\n                    loading={false}\r\n                    // bodyStyle={{ background: '#fafafa' }}\r\n                    headStyle={{ fontWeight: 'bold' }}\r\n                    extra={\r\n                        <Button icon={<PlusOutlined />} shape=\"round\" type=\"primary\" onClick={add_new_order}>添加新订单</Button>\r\n                    }\r\n                >\r\n                    <Form\r\n                        form={form}\r\n                        onFinish={onFinish}\r\n                        layout=\"inline\"\r\n                    >\r\n                        <Form.Item label=\"生产订单编号\" name=\"orderNo\">\r\n                            <Input placeholder=\"请输入生产订单编号\" allowClear />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"订单时间\" name=\"orderTime\">\r\n                            <RangePicker\r\n                                ranges={{\r\n                                    '今天': [moment(), moment()],\r\n                                    '本月': [moment().startOf('month'), moment().endOf('month')],\r\n                                }}\r\n                            />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"订单责任人\" name=\"chargeUserId\">\r\n                            <Select\r\n                                style={{ width: '120px' }}\r\n                                allowClear\r\n                            >\r\n                                {\r\n                                    users.length !== 0 && users.map(user => {\r\n                                        return <Select.Option value={user.Id} key={user.Id}>{user.Name}</Select.Option>\r\n                                    })\r\n                                }\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                查询\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                    <Divider />\r\n                    <Table\r\n                        bordered={true}\r\n                        columns={columns}\r\n                        expandable={{ expandedRowRender }}\r\n                        footer={() => <div style={{ color: '#ffa39e', textAlign: 'right' }}>默认展示一周内的订单数据</div>}\r\n                        dataSource={_state.tableData}\r\n                        rowClassName={(record, index) => {\r\n                            let className = 'light-row';\r\n                            if (index % 2 === 1) className = 'dark-row';\r\n                            return className;\r\n                        }}\r\n                        pagination={{\r\n                            showSizeChanger: true,\r\n                            onShowSizeChange: (current, size) => {\r\n                                dispatch({\r\n                                    type: ACTION_TYPE.SET_LIMIT_COUNT,\r\n                                    payload: size\r\n                                })\r\n                            },\r\n                            onChange: (page, pageSize) => {\r\n                                dispatch({\r\n                                    type: ACTION_TYPE.SET_CURRENT_PAGE,\r\n                                    payload: page\r\n                                })\r\n                            },\r\n                            showTotal: total => `共 ${total} 条`,\r\n                            total: _state.total,\r\n                            pageSizeOptions: ['5', '10', '15', '20']\r\n                        }}\r\n                    />\r\n                </Card>\r\n            </Space>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProductionOrders;","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\partConfiguration\\index.tsx",["266","267","268","269","270","271"],"import React, { useEffect, useReducer, useState } from 'react'\r\nimport './part_configuration.less'\r\nimport {\r\n    Form,\r\n    Card,\r\n    Button,\r\n    Space,\r\n    Select,\r\n    Table,\r\n    Input,\r\n    Divider,\r\n    Breadcrumb,\r\n    message,\r\n    Popconfirm\r\n} from 'antd'\r\nimport {\r\n    ExclamationCircleOutlined\r\n} from '@ant-design/icons'\r\nimport { getBomList, deleteBom } from '../../../api/integratedconfig'\r\nimport { dataSourceReducer } from './reducer'\r\nimport { ACTION_TYPE } from './typings'\r\nimport { useDeviceTypes } from '../../../hooks'\r\n\r\nexport default function DeviceConfiguration(props) {\r\n    const [form] = Form.useForm()\r\n    const [deviceTypes, updateDeviceTypes] = useDeviceTypes([])\r\n    const [state, dispatch] = useReducer(dataSourceReducer, {\r\n        tableData: [],\r\n        searchInfo: {\r\n            limit: 10,\r\n            page: 1\r\n        },\r\n        total: 0,\r\n        freshFlag: false\r\n    })\r\n\r\n    const columns = [\r\n        { title: '方案名称', dataIndex: 'Name', key: 'Name' },\r\n        {\r\n            title: '设备类型', dataIndex: 'TypeId', key: 'TypeId', render: (text, record) => {\r\n                let target = []\r\n                if (deviceTypes.length > 0) {\r\n                    target = deviceTypes.filter(deviceType => {\r\n                        return deviceType.Id === record.TypeId\r\n                    })\r\n                }\r\n                return (\r\n                    <div>{target.length > 0 ? target[0].Name : ''}</div>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            title: '操作', render: (text, record) => (\r\n                <Space size={16}>\r\n                    <Button size=\"small\" shape=\"round\" onClick={handlePreview.bind(null, record)}>预览</Button>\r\n                    <Popconfirm title=\"确认删除？\" icon={<ExclamationCircleOutlined style={{ color: 'red' }} />} onConfirm={handleDelete.bind(null, record)}>\r\n                        <Button size=\"small\" type=\"primary\" shape=\"round\" danger>删除</Button>\r\n                    </Popconfirm>\r\n                </Space>\r\n            )\r\n        },\r\n    ]\r\n\r\n    const handleAdd = () => {\r\n        props.history.push('/' + 'my-userid' + '/dc/add')\r\n    }\r\n\r\n    const handlePreview = (record) => {\r\n        if (record.Id) {\r\n            props.history.push('/' + 'my-userid' + '/dc/add?bomprogrameId=' + record.Id)\r\n        }\r\n    }\r\n\r\n    const handleDelete = (record) => {\r\n        if (record.Id) {\r\n            deleteBom(record.Id).then((res: any) => {\r\n                if (res.code === 200) {\r\n                    message.success(res.msg)\r\n                    dispatch({\r\n                        type: ACTION_TYPE.CHANGE_FRESH_FLAG\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleSearch = (values) => {\r\n        let { bom_name, device_type } = values;\r\n        let payload = {\r\n            typeId: device_type,\r\n            name: bom_name\r\n        }\r\n        dispatch({\r\n            type: ACTION_TYPE.SET_SEARCH_INFO,\r\n            payload\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('effct')\r\n        getBomList({\r\n            page: state.searchInfo.page,\r\n            limit: state.searchInfo.limit,\r\n            typeId: state.searchInfo.typeId || '',\r\n            name: state.searchInfo.name || ''\r\n        }).then((res: any) => {\r\n            if (res.code === 200) {\r\n                let n = res.data.map((item, index) => ({\r\n                    ...item,\r\n                    key: index\r\n                }))\r\n                dispatch({\r\n                    type: ACTION_TYPE.SET_TABLE_DATA, payload: {\r\n                        tableData: n,\r\n                        total: res.count\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }, [state.searchInfo.page, state.searchInfo.limit, state.searchInfo.typeId, state.searchInfo.name, state.freshFlag])\r\n\r\n    return (\r\n        <>\r\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\r\n                <div className=\"bread-area\">\r\n                    <div style={{ paddingRight: '5px' }}>当前路径：</div>\r\n                    <Breadcrumb separator=\">\">\r\n                        <Breadcrumb.Item>\r\n                            <span className=\"bread-item\">零件 BOM 列表</span>\r\n                        </Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                </div>\r\n                <Card\r\n                    title=\"零件 BOM 列表\"\r\n                    extra={\r\n                        <Space size={16}>\r\n                            {/* <Button shape=\"round\" type=\"default\" icon={<FolderOpenOutlined />}>导入方案</Button> */}\r\n                            <Button shape=\"round\" type=\"primary\" onClick={handleAdd}>添加 BOM</Button>\r\n                        </Space>\r\n                    }\r\n                >\r\n                    <Form form={form} layout=\"inline\" onFinish={handleSearch}>\r\n                        <Form.Item label=\"设备类型\" name=\"device_type\" className=\"form-item\">\r\n                            <Select style={{ width: '200px' }} allowClear>\r\n                                {\r\n                                    deviceTypes.length > 0 && deviceTypes.map(deviceType => (\r\n                                        <Select.Option key={deviceType.Id} value={deviceType.Id}>{deviceType.Name + '(' + deviceType.MaterialCode + ')'}</Select.Option>\r\n                                    ))\r\n                                }\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item label=\"方案名称\" name=\"bom_name\" className=\"form-item\">\r\n                            <Input allowClear />\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                查询\r\n                        </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                    <Divider />\r\n                    <Card\r\n                        headStyle={{ fontWeight: 'bold', padding: 0 }}\r\n                        bodyStyle={{ padding: 0 }}\r\n                        bordered={false}\r\n                    >\r\n                        <Table\r\n                            bordered\r\n                            columns={columns}\r\n                            dataSource={state.tableData}\r\n                            pagination={{\r\n                                showSizeChanger: true,\r\n                                onShowSizeChange: (current, size) => {\r\n                                    dispatch({\r\n                                        type: ACTION_TYPE.SET_LIMIT_COUNT,\r\n                                        payload: size\r\n                                    })\r\n                                },\r\n                                onChange: (page, pageSize) => {\r\n                                    dispatch({\r\n                                        type: ACTION_TYPE.SET_CURRENT_PAGE,\r\n                                        payload: page\r\n                                    })\r\n                                },\r\n                                showTotal: total => `共 ${total} 条`,\r\n                                total: state.total,\r\n                                pageSizeOptions: ['5', '10', '15', '20']\r\n                            }}\r\n                        />\r\n                    </Card>\r\n                </Card>\r\n            </Space>\r\n        </>\r\n    )\r\n}\r\n","D:\\fuzzy work\\mes_web\\src\\views\\productionOrders\\productionOrdersAdd\\index.tsx",["272","273","274","275","276","277","278","279"],"import React, { useEffect, useReducer, useState } from 'react'\r\nimport {\r\n    Card,\r\n    Button,\r\n    Space,\r\n    Form,\r\n    Input,\r\n    DatePicker,\r\n    Switch,\r\n    Select,\r\n    Divider,\r\n    Table,\r\n    Breadcrumb,\r\n    message,\r\n    Popconfirm\r\n} from 'antd'\r\nimport {\r\n    PlusOutlined,\r\n    ExclamationCircleOutlined\r\n} from '@ant-design/icons'\r\nimport './production_order_add.less'\r\nimport { addProductOrder, getDeviceListByOrderId, getProductOrderInfoByOrderId, upDateOrderInfo, deleteDevice } from '../../../api/product'\r\nimport { getSearchObj } from '../../../tools/index'\r\nimport { productDeviceListReducer } from './reducer'\r\nimport { ACTION_TYPE, MODE_TYPE } from './typings'\r\nimport moment from 'moment'\r\nimport { useUsers } from '../../../hooks'\r\n\r\nexport default function ProductionOrdersAdd(props: any) {\r\n    const [form] = Form.useForm()\r\n    const [users, updateUsers] = useUsers([])\r\n    const [_state, dispatch] = useReducer(productDeviceListReducer, {\r\n        tableData: [],\r\n        mode: 0,\r\n        orderId: 0,\r\n        freshFlag: false\r\n    })\r\n\r\n    const columns = [\r\n        { title: '产品序列号', dataIndex: 'SerialNo', key: 'SerialNo' },\r\n        { title: 'TerminalID', dataIndex: 'TerminalId', key: 'TerminalId' },\r\n        { title: '产品料号', dataIndex: 'MaterialCode', key: 'MaterialCode' },\r\n        { title: '产品名称', dataIndex: 'Name', key: 'Name' },\r\n        { title: '开始时间', dataIndex: 'CreateTime', key: 'CreateTime' },\r\n        { title: '计划完成时间', dataIndex: 'PlanTime', key: 'PlanTime' },\r\n        {\r\n            title: '操作', key: 'orderAction', render: (text, record) => (\r\n                <Space size={16}>\r\n                    <Button onClick={handleClickEdit.bind(null, record)} type=\"primary\" size=\"small\" shape=\"round\">编辑</Button>\r\n                    <Popconfirm title=\"确认删除？\" icon={<ExclamationCircleOutlined style={{ color: 'red' }} />} onConfirm={handleDelete.bind(null, record)}>\r\n                        <Button danger type=\"primary\" size=\"small\" shape=\"round\">删除</Button>\r\n                    </Popconfirm>\r\n                </Space>\r\n            )\r\n        },\r\n    ]\r\n\r\n    const handleClickEdit = (record) => {\r\n        // console.log(record)\r\n        props.history.push('/' + 'my-userid' + '/po/edit_order/edit_work?SerialNo=' + record.SerialNo + '&orderId=' + _state.orderId + '&Id=' + record.Id + '&td=' + record.TerminalId)\r\n    }\r\n\r\n    const handleDelete = (record) => {\r\n        if (record.Id) {\r\n            deleteDevice(record.Id).then((res: any) => {\r\n                if (res.code === 200) {\r\n                    dispatch({\r\n                        type: ACTION_TYPE.CHANGE_FRESH_FLAG\r\n                    })\r\n                    message.success(res.msg)\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const add_new_work = () => {\r\n        // you need add userid here\r\n        props.history.push('/' + 'my-userid' + '/po/edit_order/edit_work?orderId=' + _state.orderId)\r\n    }\r\n\r\n    // add or edit orderInfo\r\n    const handleAdd = () => {\r\n        let {\r\n            order_finish_time,\r\n            order_id,\r\n            order_in_need,\r\n            order_response_man,\r\n            order_start_time\r\n        } = form.getFieldsValue()\r\n        console.log(order_response_man)\r\n        if (!order_finish_time || !order_id || !order_response_man || !order_start_time) {\r\n            return message.warning('信息未填写完整！')\r\n        }\r\n        if (_state.mode === MODE_TYPE.CREATE) {\r\n            addProductOrder({\r\n                OrderNo: order_id,\r\n                PlanTime: order_finish_time,\r\n                CreateTime: order_start_time,\r\n                ChargeUserId: order_response_man,\r\n                isUrgent: !order_in_need,\r\n            }).then((res: any) => {\r\n                console.log(res)\r\n                if (res.code === 200) {\r\n                    dispatch({\r\n                        type: ACTION_TYPE.SET_ORDERID,\r\n                        payload: res.data[0].Id\r\n                    })\r\n                    message.success(res.msg);\r\n                }\r\n            })\r\n        } else if (_state.mode === MODE_TYPE.EDIT && _state.orderId !== 0) {\r\n            upDateOrderInfo({\r\n                Id: _state.orderId,\r\n                OrderNo: order_id,\r\n                PlanTime: order_finish_time,\r\n                CreateTime: order_start_time,\r\n                ChargeUserId: order_response_man,\r\n                isUrgent: !order_in_need\r\n            }).then((res: any) => {\r\n                if (res.code === 200) {\r\n                    message.success(res.msg)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    // 1. prepare work\r\n    // get orderId, set mode type and get user select options\r\n    useEffect(() => {\r\n        if (props.location.search) {\r\n            let { orderId } = getSearchObj(props.location.search)\r\n            let _orderId = parseInt(orderId)\r\n            // set edit mode\r\n            dispatch({\r\n                type: ACTION_TYPE.SET_MODE_TYPE,\r\n                payload: {\r\n                    type: MODE_TYPE.EDIT,\r\n                    orderId: _orderId\r\n                }\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    // 2. getdata work\r\n    // if EDIT_MODE, get DeviceList and orderInfo\r\n    useEffect(() => {\r\n        if (_state.mode !== (MODE_TYPE.CREATE || MODE_TYPE.EDIT) || _state.orderId === 0) return;\r\n\r\n        // get OrderBasicInfo by orderId\r\n        getProductOrderInfoByOrderId(_state.orderId).then((res: any) => {\r\n            if (res.code === 200) {\r\n                form.setFieldsValue({\r\n                    order_id: res.data[0].OrderNo,\r\n                    order_start_time: moment(res.data[0].CreateTime),\r\n                    order_finish_time: moment(res.data[0].PlanTime),\r\n                    order_in_need: !res.data[0].isUrgent,\r\n                    order_response_man: res.data[0].ChargeUserId\r\n                })\r\n            }\r\n        })\r\n\r\n\r\n\r\n        // get DeviceList by orderId\r\n        getDeviceListByOrderId(_state.orderId).then((res: any) => {\r\n            if (res.code === 200) {\r\n                let payload = res.data.map(item => ({\r\n                    ...item,\r\n                    CreateTime: moment(item.CreateTime).format('YYYY年 MM月 DD日 HH:mm:ss'),\r\n                    PlanTime: moment(item.PlanTime).format('YYYY年 MM月 DD日 HH:mm:ss'),\r\n                    key: item.Id\r\n                }))\r\n                dispatch({ type: ACTION_TYPE.SET_DEVICE_LIST, payload })\r\n            }\r\n        })\r\n    }, [_state.orderId, _state.mode, _state.freshFlag])\r\n\r\n    return (\r\n        <>\r\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\r\n                <div className=\"bread-area\">\r\n                    <div style={{ paddingRight: '5px' }}>当前路径：</div>\r\n                    <Breadcrumb separator=\">\">\r\n                        <Breadcrumb.Item>\r\n                            <span className=\"bread-item\" onClick={() => { props.history.go(-1) }}>生产订单列表</span>\r\n                        </Breadcrumb.Item>\r\n                        <Breadcrumb.Item>\r\n                            <span className=\"bread-item\">生产订单编辑</span>\r\n                        </Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                </div>\r\n                <Card\r\n                    title=\"订单配置\"\r\n                    loading={false}\r\n                    // bodyStyle={{ background: '#fafafa' }}\r\n                    headStyle={{ fontWeight: 'bold' }}\r\n                    extra={\r\n                        <Space size={16}>\r\n                            <Button type=\"primary\" shape=\"round\" onClick={handleAdd}>提交保存</Button>\r\n                            <Button type=\"default\" shape=\"round\">取消</Button>\r\n                        </Space>\r\n                    }\r\n                >\r\n                    <Form\r\n                        form={form}\r\n                        layout=\"inline\"\r\n                        initialValues={{ order_in_need: true }}\r\n                    >\r\n                        <Form.Item label=\"生产订单编号\" name=\"order_id\">\r\n                            <Input placeholder=\"请输入生产订单编号\" />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"开单时间\" name=\"order_start_time\">\r\n                            <DatePicker />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"计划完成时间\" name=\"order_finish_time\">\r\n                            <DatePicker />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"是否加急\" name=\"order_in_need\" valuePropName=\"checked\">\r\n                            <Switch checkedChildren=\"正常\" unCheckedChildren=\"加急\" className=\"order-form-switch\" />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"订单负责人\" name=\"order_response_man\">\r\n                            <Select\r\n                                style={{ width: '120px' }}\r\n                                allowClear\r\n                            >\r\n                                {\r\n                                    users.length !== 0 && users.map(user => {\r\n                                        return <Select.Option value={user.Id} key={user.Id}>{user.Name}</Select.Option>\r\n                                    })\r\n                                }\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Form>\r\n                    <Divider />\r\n                    <Card\r\n                        title=\"生产订单包含产品\"\r\n                        headStyle={{ fontWeight: 'bold' }}\r\n                        bodyStyle={{ padding: 0 }}\r\n                        extra={<Button type=\"primary\" shape=\"round\" icon={<PlusOutlined />} onClick={add_new_work} disabled={!_state.orderId}>添加新产品</Button>}\r\n                    >\r\n                        <Table\r\n                            bordered={true}\r\n                            columns={columns}\r\n                            dataSource={_state.tableData}\r\n                            rowClassName={(record, index) => {\r\n                                let className = 'light-row';\r\n                                if (index % 2 === 1) className = 'dark-row';\r\n                                return className;\r\n                            }}\r\n                        />\r\n                    </Card>\r\n                </Card>\r\n            </Space>\r\n        </>\r\n    )\r\n}\r\n","D:\\fuzzy work\\mes_web\\src\\views\\staffManagement\\index.tsx",["280"],"import React, { FC, ReactElement, useReducer, useEffect, useState } from 'react'\r\nimport {\r\n    Tree,\r\n    Card,\r\n    Tooltip,\r\n    Input,\r\n    Button,\r\n    Form,\r\n    Select,\r\n    Divider,\r\n    Empty,\r\n    Space,\r\n    Alert\r\n} from 'antd'\r\nimport { EditOutlined, UserOutlined } from '@ant-design/icons';\r\nimport './staff_management.less';\r\nimport { ACTION_TYPE, ITree, ITreeNode } from './typings';\r\nimport { treeReducer } from './reducer';\r\nimport { getUsersList } from '../../api/staff'\r\n\r\nconst initialState: ITree = {\r\n    treeData: []\r\n};\r\n\r\nconst StaffManagement: FC = (): ReactElement => {\r\n    const [form] = Form.useForm()\r\n    const [isEditMode, setIsEditMode] = useState<boolean>(false)\r\n\r\n    const onSelect = (selectedKeys, info) => {\r\n        console.log('selected', selectedKeys, info);\r\n    };\r\n\r\n    const handleChange = () => {\r\n        console.log(form.getFieldsValue())\r\n    }\r\n\r\n    const [state, dispatch] = useReducer(treeReducer, initialState)\r\n\r\n    const onCheck = (checkedKeys: React.Key[]) => {\r\n        console.log('onCheck', checkedKeys);\r\n    };\r\n\r\n    const toggleIsEditMode = () => {\r\n        setIsEditMode(!isEditMode)\r\n    }\r\n\r\n    // 处理树结构返回数据\r\n    const handleTreeData = (treeData): ITreeNode[] => {\r\n        let children = []\r\n        treeData.forEach((item) => {\r\n            children.push({\r\n                title: item.Name,\r\n                key: item.Id,\r\n                id: item.Id,\r\n                icon: <UserOutlined />\r\n            })\r\n        })\r\n        return children\r\n    }\r\n\r\n    useEffect(() => {\r\n        let result = []\r\n        getUsersList().then((res: any) => {\r\n            // debugger\r\n            if (res.code === 200) {\r\n                result = handleTreeData(res.data)\r\n                dispatch({\r\n                    type: ACTION_TYPE.GET_TREE,\r\n                    payload: result\r\n                })\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"staff-manage-page\">\r\n            <div className=\"tree-slider\">\r\n                <Card\r\n                    title=\"员工列表\"\r\n                    extra={<Tooltip title=\"编辑模式\" color=\"#40a9ff\"><Button icon={<EditOutlined />} onClick={toggleIsEditMode} type=\"primary\" shape=\"round\" size=\"small\">{isEditMode ? '退出编辑' : '编辑模式'}</Button></Tooltip>}\r\n                    headStyle={{ padding: '0 20px' }}\r\n                    bodyStyle={{ padding: '0' }}\r\n                >\r\n                    <div className=\"search-box\">\r\n                        <Input placeholder=\"请输入员工姓名或工号\" />\r\n                    </div>\r\n                    {\r\n                        isEditMode ?\r\n                            <div className=\"edit-box\">\r\n                                <Space>\r\n                                    <Button size=\"small\" type=\"primary\">添加</Button>\r\n                                    <Button size=\"small\" type=\"primary\" danger>删除</Button>\r\n                                </Space>\r\n                            </div>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                    <div className=\"tree-box\">\r\n                        {\r\n                            state.treeData.length > 0\r\n                                ?\r\n                                <Tree\r\n                                    checkable={isEditMode}\r\n                                    showLine={{ showLeafIcon: false }}\r\n                                    showIcon={!isEditMode}\r\n                                    defaultExpandAll={true}\r\n                                    onSelect={onSelect}\r\n                                    treeData={state.treeData}\r\n                                    onCheck={onCheck}\r\n                                />\r\n                                :\r\n                                <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                        }\r\n                    </div>\r\n                </Card>\r\n            </div>\r\n            <div className=\"staff-info\">\r\n                <Card\r\n                    title=\"员工信息\"\r\n                    extra={<Button type=\"primary\" shape=\"round\" onClick={handleChange}>保存修改</Button>}\r\n                >\r\n                    <Form\r\n                        form={form}\r\n                    >\r\n                        <Form.Item\r\n                            label=\"员工姓名\"\r\n                            name=\"staff-name\"\r\n                        >\r\n                            <Input style={{ width: '200px' }} placeholder=\"请输入姓名\" allowClear />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"员工岗位\"\r\n                            name=\"staff-station\"\r\n                        >\r\n                            <Select\r\n                                mode=\"multiple\"\r\n                                allowClear\r\n                                style={{ width: '250px' }}\r\n                                placeholder=\"请选择岗位\"\r\n                            >\r\n                                <Select.Option value=\"1\">岗位1</Select.Option>\r\n                                <Select.Option value=\"2\">岗位2</Select.Option>\r\n                                <Select.Option value=\"3\">岗位3</Select.Option>\r\n                                <Select.Option value=\"4\">岗位4</Select.Option>\r\n                                <Select.Option value=\"5\">岗位5</Select.Option>\r\n                                <Select.Option value=\"6\">岗位6</Select.Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Divider orientation=\"left\">可选分配账号</Divider>\r\n                        <Form.Item\r\n                            label=\"员工账号\"\r\n                            name=\"staff-account\"\r\n                        >\r\n                            <Input style={{ width: '200px' }} placeholder=\"请输入账号\" allowClear />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"账号密码\"\r\n                            name=\"staff-password\"\r\n                        >\r\n                            <Input.Password style={{ width: '200px' }} placeholder=\"请输入密码\" />\r\n                        </Form.Item>\r\n                        <Divider orientation=\"left\">权限分配</Divider>\r\n                        <Form.Item\r\n                            label=\"权限选择\"\r\n                            name=\"staff-authority\"\r\n                        >\r\n                            <Select\r\n                                mode=\"multiple\"\r\n                                allowClear\r\n                                style={{ width: '500px' }}\r\n                                placeholder=\"请选择此角色拥有权限\"\r\n                            >\r\n                                <Select.Option value=\"1\">权限1</Select.Option>\r\n                                <Select.Option value=\"2\">权限2</Select.Option>\r\n                                <Select.Option value=\"3\">权限3</Select.Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default StaffManagement;","D:\\fuzzy work\\mes_web\\src\\views\\ordersStandingBook\\index.tsx",["281","282","283"],"import React, { useEffect, useReducer, useState } from 'react'\r\nimport {\r\n    Card,\r\n    Form,\r\n    Button,\r\n    DatePicker,\r\n    Input,\r\n    Divider,\r\n    Table,\r\n    Select\r\n} from 'antd'\r\nimport { searchOrderBookByOptions } from '../../api/orderbook'\r\nimport { ACTION_TYPE } from './typings'\r\nimport { orderStandingBookReducer } from './reducer'\r\nimport moment from 'moment'\r\nimport { useUsers, usePositions } from '../../hooks'\r\nimport { PreviewForm } from '../../components'\r\n\r\nconst { RangePicker } = DatePicker;\r\n\r\nexport default function OrdersStandingBook() {\r\n    const [form] = Form.useForm()\r\n    const [users, updateUsers] = useUsers([])\r\n    const [positions, updatePositions] = usePositions([])\r\n    const [_state, dispatch] = useReducer(orderStandingBookReducer, {\r\n        tableData: [],\r\n        total: 0,\r\n        searchInfo: {\r\n            limit: 10,\r\n            currentPage: 1,\r\n        }\r\n    })\r\n\r\n    const columns = [\r\n        { title: '生产订单编号', dataIndex: 'OrderNo', key: 'OrderNo' },\r\n        { title: '产品序列号', dataIndex: 'SerialNo', key: 'SerialNo' },\r\n        { title: 'TerminalID', dataIndex: 'TerminalId', key: 'TerminalId' },\r\n        { title: '产品名称', dataIndex: 'DeviceName', key: 'DeviceName' },\r\n        { title: '填写人员', dataIndex: 'UserName', key: 'UserName' },\r\n        { title: '岗位', dataIndex: 'PositionName', key: 'PositionName' },\r\n        { title: '填写时间', dataIndex: 'Time', key: 'Time' }\r\n    ]\r\n\r\n    const search_work = (values: any) => {\r\n        let { SerialNo, TerminalId, Time, orderNo, positionId, userId } = values\r\n        let payload = {\r\n            startTime: Time ? moment(Time[0]).toJSON() : '',\r\n            endTime: Time ? moment(Time[1]).toJSON() : '',\r\n            orderNo,\r\n            userId,\r\n            positionId,\r\n            TerminalId,\r\n            SerialNo\r\n        }\r\n        dispatch({\r\n            type: ACTION_TYPE.SET_SEARCH_INFO,\r\n            payload\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        searchOrderBookByOptions({\r\n            startTime: _state.searchInfo.startTime || '',\r\n            endTime: _state.searchInfo.endTime || '',\r\n            orderNo: _state.searchInfo.orderNo || '',\r\n            userId: _state.searchInfo.userId || '',\r\n            positionId: _state.searchInfo.positionId || '',\r\n            TerminalId: _state.searchInfo.TerminalId || '',\r\n            SerialNo: _state.searchInfo.SerialNo || '',\r\n            limit: _state.searchInfo.limit,\r\n            page: _state.searchInfo.currentPage\r\n        }).then((res: any) => {\r\n            console.log(res)\r\n            if (res.code === 200) {\r\n                let n = res.data.map((item, index) => ({\r\n                    ...item,\r\n                    key: index,\r\n                    Time: moment(item.Time).format('YYYY年 M月D日'),\r\n                }))\r\n                dispatch({\r\n                    type: ACTION_TYPE.SET_TABLE_DATA,\r\n                    payload: {\r\n                        tableData: n,\r\n                        total: res.count\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }, [_state.searchInfo.startTime, _state.searchInfo.endTime, _state.searchInfo.orderNo, _state.searchInfo.userId, _state.searchInfo.positionId, _state.searchInfo.TerminalId, _state.searchInfo.SerialNo, _state.searchInfo.limit, _state.searchInfo.currentPage])\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <Form\r\n                    layout=\"inline\"\r\n                    onFinish={search_work}\r\n                    form={form}\r\n                >\r\n                    <Form.Item label=\"时间范围\" name=\"Time\">\r\n                        <RangePicker />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"生产订单编号\" name=\"orderNo\">\r\n                        <Input placeholder=\"请输入生产订单编号\" allowClear />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"产品序列号\" name=\"SerialNo\">\r\n                        <Input placeholder=\"请输入产品序列号\" allowClear />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"TerminalID\" name=\"TerminalId\">\r\n                        <Input placeholder=\"请输入TerminalID\" allowClear />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"员工姓名\" name=\"userId\">\r\n                        <Select\r\n                            style={{ width: '120px' }}\r\n                            allowClear\r\n                        >\r\n                            {\r\n                                users.length !== 0 && users.map(user => {\r\n                                    return <Select.Option value={user.Id} key={user.Id}>{user.Name}</Select.Option>\r\n                                })\r\n                            }\r\n                        </Select>\r\n                    </Form.Item>\r\n                    <Form.Item label=\"工作岗位\" name=\"positionId\">\r\n                        <Select\r\n                            style={{ width: '120px' }}\r\n                            allowClear\r\n                        >\r\n                            {\r\n                                positions.length > 0 && positions.map((position) => (\r\n                                    <Select.Option value={position.Id} key={position.Id}>{position.Name}</Select.Option>\r\n                                ))\r\n                            }\r\n                        </Select>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            搜索\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n                <Divider />\r\n                <Table\r\n                    dataSource={_state.tableData}\r\n                    columns={columns}\r\n                    bordered\r\n                    expandable={{\r\n                        expandedRowRender: record => {\r\n                            let formProps = JSON.parse(record.Content)\r\n                            console.log(JSON.parse(record.Content))\r\n                            return <PreviewForm basicOptions={null} formItemProps={formProps} />\r\n                        },\r\n                    }}\r\n                    footer={() => <div style={{ color: '#ffa39e', textAlign: 'right' }}>默认展示一周内的工单数据</div>}\r\n                    pagination={{\r\n                        showSizeChanger: true,\r\n                        onShowSizeChange: (current, size) => {\r\n                            dispatch({\r\n                                type: ACTION_TYPE.SET_LIMIT_COUNT,\r\n                                payload: size\r\n                            })\r\n                        },\r\n                        onChange: (page, pageSize) => {\r\n                            dispatch({\r\n                                type: ACTION_TYPE.SET_CURRENT_PAGE,\r\n                                payload: page\r\n                            })\r\n                        },\r\n                        showTotal: total => `共 ${total} 条`,\r\n                        total: _state.total,\r\n                        pageSizeOptions: ['5', '10', '15', '20']\r\n                    }}\r\n                />\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\processConfiguration\\index.tsx",["284","285","286","287","288"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Card,\r\n    Button,\r\n    Table,\r\n    Space,\r\n    Form,\r\n    Select,\r\n    Breadcrumb,\r\n    Divider\r\n} from 'antd'\r\nimport './process_configuration.less'\r\nimport { getProgrammeList } from '../../../api/integratedconfig'\r\nimport { useDeviceTypes } from '../../../hooks'\r\n\r\nexport default function ProcessConfiguration(props) {\r\n    const [deviceTypes, updateDeviceTypes] = useDeviceTypes([])\r\n    const [typeId, updateTypeId] = useState(null)\r\n    const [programme, updateProgramme] = useState([])\r\n\r\n    const columns = [\r\n        { title: '方案名称', dataIndex: 'Name', key: 'Name' },\r\n        { title: '设备类型', dataIndex: 'TypeName', key: 'TypeName' },\r\n        { title: '生产工单模板', dataIndex: 'ProducerMouldName', key: 'ProducerMouldName' },\r\n        { title: '质检工单模板', dataIndex: 'QualityInspectorMouldName', key: 'QualityInspectorMouldName' },\r\n        { title: '仓库工单模板', dataIndex: 'GodownKeeperMouldName', key: 'GodownKeeperMouldName' },\r\n        { title: 'bom模板', dataIndex: 'BomProgrammeName', key: 'BomProgrammeName' },\r\n        {\r\n            title: '操作', render: (record) => (\r\n                <Space size={16}>\r\n                    <Button size=\"small\" shape=\"round\" type=\"primary\" onClick={handleEdit.bind(null, record)}>编辑</Button>\r\n                    <Button size=\"small\" shape=\"round\" type=\"default\">预览</Button>\r\n                    <Button size=\"small\" shape=\"round\" danger type=\"primary\">删除</Button>\r\n                </Space>\r\n            )\r\n        },\r\n    ]\r\n\r\n    const handleAdd = () => {\r\n        props.history.push('/' + 'my-userid' + '/pc/add')\r\n    }\r\n\r\n    const handleEdit = (record) => {\r\n        props.history.push('/' + 'my-userid' + '/pc/add?Id=' + record.Id)\r\n    }\r\n\r\n    useEffect(() => {\r\n        let _typeId = typeId || '';\r\n        getProgrammeList(_typeId).then((res: any) => {\r\n            if (res.code === 200) {\r\n                let n = res.data.map(item => ({\r\n                    ...item,\r\n                    key: item.Id\r\n                }))\r\n                updateProgramme(n)\r\n            }\r\n        })\r\n    }, [typeId])\r\n\r\n    const handleChange = (changedFields) => {\r\n        if (changedFields.typeId) updateTypeId(changedFields.typeId)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\r\n                <div className=\"bread-area\">\r\n                    <div style={{ paddingRight: '5px' }}>当前路径：</div>\r\n                    <Breadcrumb separator=\">\">\r\n                        <Breadcrumb.Item>\r\n                            <span className=\"bread-item\">综合方案列表</span>\r\n                        </Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                </div>\r\n\r\n                <Card\r\n                    title=\"综合方案\"\r\n                    headStyle={{ fontWeight: 'bold' }}\r\n                    extra={\r\n                        <Space size={16}>\r\n                            <Button type=\"primary\" shape=\"round\" onClick={handleAdd}>创建新方案</Button>\r\n                        </Space>\r\n                    }\r\n                >\r\n                    <Form\r\n                        layout=\"inline\"\r\n                        onValuesChange={handleChange}\r\n                    >\r\n                        <Form.Item label=\"选择设备类型\" name=\"typeId\">\r\n                            <Select style={{ width: '200px' }} allowClear>\r\n                                {\r\n                                    deviceTypes.length > 0 && deviceTypes.map(deviceType => (\r\n                                        <Select.Option key={deviceType.Id} value={deviceType.Id}>{deviceType.Name + '(' + deviceType.MaterialCode + ')'}</Select.Option>\r\n                                    ))\r\n                                }\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Form>\r\n                    <Divider />\r\n                    <Card\r\n                        bodyStyle={{ padding: 0 }}\r\n                        bordered={false}\r\n                        headStyle={{ padding: 0, fontWeight: 'bold' }}\r\n                    >\r\n                        <Table bordered columns={columns} dataSource={programme}></Table>\r\n                    </Card>\r\n\r\n                </Card>\r\n            </Space>\r\n        </>\r\n    )\r\n}\r\n","D:\\fuzzy work\\mes_web\\src\\views\\login\\index.tsx",["289","290"],"import React, { useEffect } from 'react'\r\nimport {\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Checkbox,\r\n    message\r\n} from 'antd'\r\nimport { encryptAES, decryptAES } from '../../tools/aes'\r\nimport './login.less'\r\nimport { login } from '../../api/login'\r\n\r\ninterface UserInfo {\r\n    account: string | undefined;\r\n    password: string | undefined;\r\n    remember: boolean;\r\n}\r\n\r\nexport default function Login(props: any) {\r\n    const handleLogin = (values: UserInfo) => {\r\n        let { account, password, remember } = values;\r\n        if (remember) {\r\n            localStorage.setItem('user', encryptAES(JSON.stringify({ ac: account, pwd: password })))\r\n        }\r\n        login({ ac: account, pwd: encryptAES(password) }).then((res: any) => {\r\n            console.log(res)\r\n            if (res.bRes) {\r\n                localStorage.setItem('key', encryptAES(res.Ticket))\r\n                props.history.push('/')\r\n            } else {\r\n                message.error('login error!');\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem('user')) {\r\n            const { ac, pwd } = decryptAES(localStorage.getItem('user'))\r\n            login({ ac, pwd }).then((res: any) => {\r\n                if (res.bRes) {\r\n                    localStorage.setItem('key', encryptAES(res.Ticket))\r\n                    props.history.push('/')\r\n                } else {\r\n                    message.error('login error!');\r\n                }\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"login-page\">\r\n            <div className=\"login-box\">\r\n                <h1 className=\"login-title\">新图维追溯管理系统</h1>\r\n                <Form className=\"login-form\" onFinish={handleLogin} initialValues={{ ['remember']: false }}>\r\n                    <Form.Item name=\"account\" style={{ paddingBottom: '0px' }}>\r\n                        <Input\r\n                            addonBefore=\"账号\"\r\n                            allowClear\r\n                            placeholder=\"请输入账号\"\r\n                            className=\"first-input\"\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"password\" style={{ paddingTop: '0px' }}>\r\n                        <Input.Password\r\n                            addonBefore=\"密码\"\r\n                            placeholder=\"请输入密码\"\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"remember\" valuePropName=\"checked\">\r\n                        <Checkbox>记住我</Checkbox>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button block type=\"primary\" htmlType=\"submit\">登录</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","D:\\fuzzy work\\mes_web\\src\\views\\staffManagement\\reducer.ts",[],"D:\\fuzzy work\\mes_web\\src\\views\\staffManagement\\typings.ts",[],"D:\\fuzzy work\\mes_web\\src\\views\\productionOrders\\productionOrdersAddWork\\index.tsx",["291","292","293","294","295","296"],"import React, { ReactNode, useRef, useState, useCallback, useEffect, useReducer } from 'react'\r\nimport {\r\n    Card,\r\n    Button,\r\n    Row,\r\n    Col,\r\n    Form,\r\n    Select,\r\n    Space,\r\n    Tooltip,\r\n    Input,\r\n    Breadcrumb,\r\n    message,\r\n    DatePicker,\r\n    InputNumber\r\n} from 'antd'\r\nimport {\r\n    PrinterTwoTone\r\n} from '@ant-design/icons'\r\nimport './production_order_add_work.less'\r\nimport JsBarcode from 'jsbarcode'\r\nimport { getSearchObj, isIFrame } from '../../../tools'\r\nimport { productionOrderAddWorkReducer } from './reducer'\r\nimport { ACTION_TYPE, MODE_TYPE } from './typings'\r\nimport { getPlanList, addDevice, getDeviceInfoById, updateDevice, getDeviceTypeById } from '../../../api/product'\r\nimport moment from 'moment'\r\nimport { useDeviceTypes } from '../../../hooks'\r\n\r\nconst _barcode_options = {\r\n    format: \"CODE128\",//选择要使用的条形码类型\r\n    width: 3,//设置条之间的宽度\r\n    height: 100,//高度\r\n    displayValue: true,//是否在条形码下方显示文字\r\n    fontOptions: 'bold',// 设置字体加粗\r\n    textAlign: \"middle\",//设置文本的水平对齐方式\r\n    textPosition: \"bottom\",//设置文本的垂直位置\r\n    textMargin: 5,//设置条形码和文本之间的间距\r\n    fontSize: 22,//设置文本的大小\r\n    background: \"#eee\",//设置条形码的背景\r\n    margin: 25//设置条形码周围的空白边距\r\n}\r\n\r\nexport default function ProductionOrdersAddWork(props) {\r\n    const [form1] = Form.useForm()\r\n    const [form2] = Form.useForm()\r\n    const refBarContainer = useRef<HTMLCanvasElement>(null)\r\n    const mainRef = useRef<HTMLDivElement>(null)\r\n    const [isBarcodeExist, setIsBarcodeExist] = useState<boolean>(false)\r\n    const [deviceTypes, updateDeviceTypes] = useDeviceTypes([])\r\n    const [_state, dispatch] = useReducer(productionOrderAddWorkReducer, {\r\n        count: 0,\r\n        typeId: null,\r\n        plans: [],\r\n        mode: 0,\r\n        serialNo: 0,\r\n        Id: 0\r\n    })\r\n\r\n    const create_barcode = (values) => {\r\n        let target = null\r\n        if (_state.typeId) {\r\n            getDeviceTypeById(_state.typeId).then((res: any) => {\r\n                if (res.code === 200) {\r\n                    target = res.data[0] || null\r\n                    let { productId, friendCode } = create_code(target)\r\n                    if (!productId || !friendCode) return;\r\n                    JsBarcode(refBarContainer.current, friendCode + productId, { ..._barcode_options, text: friendCode + ' ' + productId })\r\n                    setIsBarcodeExist(true)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    // 创建code码\r\n    const create_code = (target) => {\r\n        let serial = form2.getFieldValue('serialNo') // 产品编号\r\n        let year = form1.getFieldValue('CreateTime').format('YY') // 生产年份\r\n        let month = parseInt(form1.getFieldValue('CreateTime').format('MM')).toString(16).toUpperCase() // 16 进制月\r\n\r\n        let friendCode = target ? target.MaterialCode : null // 用友编码\r\n        let productId = (serial && year && month) ? '22' + year + month + serial : null // 成品ID\r\n        return { productId, friendCode }\r\n    }\r\n\r\n    const handlePrint = () => {\r\n        // 判断是否生成条码\r\n        if (!isBarcodeExist) {\r\n            message.warning('请生成条形码！');\r\n            return true;\r\n        }\r\n\r\n        const mainCanvas = refBarContainer.current\r\n\r\n        // 将 canvas 转为图片\r\n        const mainImg = new Image()\r\n        const mainImgSrc = mainCanvas.toDataURL('image/png')\r\n        mainImg.src = mainImgSrc\r\n\r\n        // 图片加载完成后\r\n        mainImg.onload = () => {\r\n            var iframe = document.getElementById(\"print-iframe\");\r\n            if (!iframe) {\r\n                iframe = document.createElement('IFRAME');\r\n                var doc = null;\r\n                iframe.setAttribute(\"id\", \"print-iframe\");\r\n                iframe.setAttribute('style', 'position:absolute;width:0px;height:0px;left:-500px;top:-500px;');\r\n                document.body.appendChild(iframe);\r\n                doc = (iframe as HTMLIFrameElement).contentWindow.document;\r\n                //这里可以自定义样式\r\n                //doc.write(\"<LINK rel=\"stylesheet\" type=\"text/css\" href=\"css/print.css\">\");\r\n                doc.write(\"<img src='\" + mainImgSrc + \"' />\");\r\n                doc.close();\r\n                (iframe as HTMLIFrameElement).contentWindow.focus();\r\n            }\r\n\r\n            (iframe as HTMLIFrameElement).contentWindow.print();\r\n            if (navigator.userAgent.indexOf(\"MSIE\") > 0) {\r\n                document.body.removeChild(iframe);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSave = () => {\r\n        let { CreateTime, Name, PlanTime, ProgrammeId, TypeId } = form1.getFieldsValue()\r\n        let { num } = form2.getFieldsValue()\r\n        let { orderId, SerialNo, Id, td } = getSearchObj(props.location.search)\r\n        if (!CreateTime || !Name || !PlanTime || !ProgrammeId || !TypeId) {\r\n            return message.warning('信息未填写完整！')\r\n        }\r\n        if (_state.mode === MODE_TYPE.CREATE) {\r\n            addDevice({\r\n                num,\r\n                OrderID: orderId,\r\n                Name,\r\n                PlanTime,\r\n                CreateTime,\r\n                TypeId,\r\n                ProgrammeId\r\n            }).then((res: any) => {\r\n                if (res.code === 200) message.success(res.msg)\r\n            })\r\n        } else if (_state.mode === MODE_TYPE.EDIT && orderId && SerialNo && Id && td) {\r\n            updateDevice({\r\n                Id,\r\n                SerialNo,\r\n                OrderID: orderId,\r\n                Name,\r\n                PlanTime,\r\n                CreateTime,\r\n                TerminalId: td,\r\n                TypeId,\r\n                ProgrammeId\r\n            }).then((res: any) => {\r\n                if (res.code === 200) message.success(res.msg)\r\n            })\r\n        }\r\n    }\r\n\r\n    // prepare work 2\r\n    useEffect(() => {\r\n        if (_state.typeId) {\r\n            getPlanList(_state.typeId).then((res: any) => {\r\n                dispatch({\r\n                    type: ACTION_TYPE.SET_PLANS,\r\n                    payload: res.data\r\n                })\r\n            })\r\n        }\r\n    }, [_state.typeId])\r\n\r\n    // prepare work 1\r\n    useEffect(() => {\r\n        if (props.location.search) {\r\n            let { SerialNo, Id } = getSearchObj(props.location.search)\r\n            if (SerialNo && Id) {\r\n                let _SerialNo = parseInt(SerialNo)\r\n                let _Id = parseInt(Id)\r\n                dispatch({\r\n                    type: ACTION_TYPE.SET_MODE,\r\n                    payload: {\r\n                        type: MODE_TYPE.EDIT,\r\n                        serialNo: _SerialNo,\r\n                        Id: _Id\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (_state.mode !== MODE_TYPE.EDIT || _state.Id === 0) return;\r\n        // edit mode\r\n        getDeviceInfoById(_state.Id).then((res: any) => {\r\n            let { TypeId, Name, CreateTime, PlanTime, ProgrammeId } = res.data[0]\r\n            form1.setFieldsValue({\r\n                TypeId,\r\n                Name,\r\n                CreateTime: moment(CreateTime),\r\n                PlanTime: moment(PlanTime),\r\n                ProgrammeId\r\n            })\r\n            dispatch({\r\n                type: ACTION_TYPE.SET_TYPEID,\r\n                payload: TypeId\r\n            })\r\n            form2.setFieldsValue({\r\n                serialNo: _state.serialNo\r\n            })\r\n        })\r\n    }, [_state.mode, _state.serialNo, _state.Id])\r\n\r\n    return (\r\n        <>\r\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\r\n                <div className=\"bread-area\">\r\n                    <div style={{ paddingRight: '5px' }}>当前路径：</div>\r\n                    <Breadcrumb>\r\n                        <Breadcrumb.Item>\r\n                            <span className=\"bread-item\" onClick={() => { props.history.go(-2) }}>生产订单列表</span>\r\n                        </Breadcrumb.Item>\r\n                        <Breadcrumb.Item>\r\n                            <span className=\"bread-item\" onClick={() => { props.history.go(-1) }}>生产订单编辑</span>\r\n                        </Breadcrumb.Item>\r\n                        <Breadcrumb.Item>\r\n                            <span className=\"bread-item\">产品配置</span>\r\n                        </Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                </div>\r\n                <Card\r\n                    title=\"产品配置\"\r\n                    bodyStyle={{ padding: '2px 16px 14px 16px', background: '#fafafa' }}\r\n                    headStyle={{ fontWeight: 'bold' }}\r\n                    extra={\r\n                        <Space size={16}>\r\n                            <Button type=\"primary\" shape=\"round\" onClick={handleSave}>提交保存</Button>\r\n                            <Button type=\"default\" shape=\"round\">取消</Button>\r\n                        </Space>\r\n                    }\r\n                >\r\n                    <Row gutter={16}>\r\n                        <Col span={16}>\r\n                            <Space direction=\"vertical\" size={16} style={{ width: '100%' }}>\r\n                                <Card title=\"基本信息\" headStyle={{ fontWeight: 'bold' }}>\r\n                                    <Form\r\n                                        layout=\"inline\"\r\n                                        form={form1}\r\n                                        initialValues={{ product_count: 1 }}\r\n                                        onValuesChange={(changedValues) => {\r\n                                            console.log(changedValues)\r\n                                            if (changedValues.hasOwnProperty(\"TypeId\")) {\r\n                                                dispatch({\r\n                                                    type: ACTION_TYPE.SET_TYPEID,\r\n                                                    payload: parseInt(changedValues.TypeId)\r\n                                                })\r\n                                            }\r\n                                        }}\r\n                                    >\r\n\r\n                                        <Form.Item label=\"设备类型\" name=\"TypeId\">\r\n                                            <Select\r\n                                                style={{ width: '200px' }}\r\n                                                allowClear\r\n                                            >\r\n                                                {\r\n                                                    deviceTypes.length > 0 && deviceTypes.map((deviceType) => (\r\n                                                        <Select.Option value={deviceType.Id} key={deviceType.Id}>{deviceType.Name + '(' + deviceType.MaterialCode + ')'}</Select.Option>\r\n                                                    ))\r\n                                                }\r\n                                            </Select>\r\n                                        </Form.Item>\r\n\r\n                                        <Form.Item label=\"产品名称\" name=\"Name\">\r\n                                            <Input placeholder=\"请输入产品名称\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item label=\"开始时间\" name=\"CreateTime\">\r\n                                            <DatePicker />\r\n                                        </Form.Item>\r\n                                        <Form.Item label=\"计划完成时间\" name=\"PlanTime\">\r\n                                            <DatePicker />\r\n                                        </Form.Item>\r\n                                        <Form.Item label=\"综合方案选择\" name=\"ProgrammeId\">\r\n                                            <Select style={{ width: '250px' }} placeholder=\"请先选择设备类型\" disabled={_state.mode === 0 && !_state.typeId}>\r\n                                                {\r\n                                                    _state.plans.length > 0 && _state.plans.map((plan) => (\r\n                                                        <Select.Option value={plan.Id} key={plan.Id}>{plan.Name}</Select.Option>\r\n                                                    ))\r\n                                                }\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                    </Form>\r\n                                </Card>\r\n                                <Card\r\n                                    title=\"设备属性\"\r\n                                    headStyle={{ fontWeight: 'bold' }}\r\n                                >\r\n\r\n                                </Card>\r\n                            </Space>\r\n                        </Col>\r\n                        <Col span={8}>\r\n                            <Space direction=\"vertical\" size={16} style={{ width: '100%' }}>\r\n                                <Card\r\n                                    title=\"产品序列号\"\r\n                                    extra={<Button type=\"primary\" size=\"small\" shape=\"round\" onClick={create_barcode}>生成条形码</Button>}\r\n                                >\r\n                                    <Form\r\n                                        form={form2}\r\n                                        initialValues={{ num: 1 }}\r\n                                    >\r\n                                        {\r\n                                            // create mode\r\n                                            _state.mode === 0 ?\r\n                                                <Form.Item label=\"产品数量\" name=\"num\">\r\n                                                    <InputNumber min={1} />\r\n                                                </Form.Item>\r\n                                                : null\r\n                                        }\r\n                                        {\r\n                                            // edit mode\r\n                                            _state.mode === 1 ?\r\n                                                <Form.Item label=\"产品序列号\" name=\"serialNo\">\r\n                                                    <Input placeholder=\"请输入产品序列号\" readOnly bordered={false} />\r\n                                                </Form.Item>\r\n                                                : null\r\n                                        }\r\n                                    </Form>\r\n                                </Card>\r\n                                <Card\r\n                                    title=\"条码生成区\"\r\n                                    extra={<Tooltip title=\"打印条形码\" color=\"#40a9ff\"><Button onClick={handlePrint} icon={<PrinterTwoTone />} shape=\"circle\"></Button></Tooltip>}\r\n                                    bodyStyle={{ minHeight: '150px', padding: 0, overflow: 'hidden', position: 'relative' }}\r\n                                >\r\n                                    <div className=\"bar-area\" ref={mainRef}>\r\n                                        <canvas ref={refBarContainer} className=\"barcode-container\" />\r\n                                    </div>\r\n                                </Card>\r\n\r\n                            </Space>\r\n                        </Col>\r\n                    </Row>\r\n                </Card>\r\n            </Space>\r\n        </>\r\n    )\r\n}\r\n","D:\\fuzzy work\\mes_web\\src\\api\\login.ts",[],"D:\\fuzzy work\\mes_web\\src\\api\\index.ts",[],"D:\\fuzzy work\\mes_web\\src\\tools\\aes.ts",[],"D:\\fuzzy work\\mes_web\\src\\api\\staff.ts",[],"D:\\fuzzy work\\mes_web\\src\\api\\product.ts",[],"D:\\fuzzy work\\mes_web\\src\\views\\productionOrders\\reducer.ts",[],"D:\\fuzzy work\\mes_web\\src\\views\\productionOrders\\typings.ts",[],"D:\\fuzzy work\\mes_web\\src\\views\\productionOrders\\productionOrdersAdd\\reducer.ts",["297"],"import { ACTION_TYPE, IState, MODE_TYPE } from './typings'\r\nimport { fromJS } from 'immutable'\r\n\r\n/**\r\n * \r\n * state:\r\n * {\r\n *      tableData: [],\r\n *      mode,\r\n *      orderId: 0,\r\n *      freshFlag: false\r\n * }\r\n * \r\n */\r\n\r\nfunction productDeviceListReducer(state: IState, action) {\r\n    const { type, payload } = action;\r\n    const _state = fromJS(state)\r\n\r\n    switch (type) {\r\n        case ACTION_TYPE.SET_DEVICE_LIST:\r\n            return _state.set('tableData', payload).toJS()\r\n        case ACTION_TYPE.SET_MODE_TYPE:\r\n            return _state.set('mode', payload.type).set('orderId', payload.orderId).toJS()\r\n        case ACTION_TYPE.SET_ORDERID:\r\n            return _state.set('orderId', payload).toJS()\r\n        case ACTION_TYPE.CHANGE_FRESH_FLAG:\r\n            return _state.set('freshFlag', !_state.get('freshFlag')).toJS()\r\n        default:\r\n            return _state.toJS()\r\n    }\r\n}\r\n\r\nexport {\r\n    productDeviceListReducer\r\n}",["298","299"],"D:\\fuzzy work\\mes_web\\src\\views\\productionOrders\\productionOrdersAdd\\typings.ts",[],"D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\partConfiguration\\partConfigurationAdd\\index.tsx",["300","301","302","303"],"import React, { useRef, useReducer, useEffect, useState, useMemo } from 'react'\r\nimport {\r\n    Form,\r\n    Card,\r\n    Button,\r\n    Space,\r\n    Select,\r\n    Table,\r\n    Input,\r\n    Divider,\r\n    Breadcrumb,\r\n    message\r\n} from 'antd'\r\nimport {\r\n    FolderOpenOutlined\r\n} from '@ant-design/icons'\r\nimport './part_configuration_add.less'\r\nimport XLSX from 'xlsx'\r\nimport { getDataSource } from '../../../../tools/index'\r\nimport { dataSourceReducer } from './reducer'\r\nimport { ACTION_TYPE, MODE_TYPE } from './typings'\r\nimport { addBom, getBom } from '../../../../api/integratedconfig'\r\nimport { getSearchObj } from '../../../../tools/index'\r\nimport { useDeviceTypes } from '../../../../hooks'\r\nimport { PartTable } from '../../../../components'\r\n\r\nexport default function PartConfigurationAdd(props) {\r\n    const [form] = Form.useForm()\r\n    const inputRef = useRef(null)\r\n    const [state, dispatch] = useReducer(dataSourceReducer, [])\r\n    const [deviceTypes, updateDeviceTypes] = useDeviceTypes([])\r\n    const [mode, updateMode] = useState<number>(null)\r\n\r\n    const handleSave = () => {\r\n        if (state.length === 0) return message.warn('请导入bom！')\r\n        let { bom_name, device_type } = form.getFieldsValue()\r\n        if (!bom_name || !device_type) return message.warn('类型或方案名称未填！')\r\n        addBom({\r\n            list: state,\r\n            Name: bom_name,\r\n            TypeId: device_type\r\n        }).then((res: any) => {\r\n            if (res.code === 200) {\r\n                message.success(res.msg)\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleAdd = () => {\r\n        inputRef.current.dispatchEvent(new MouseEvent('click', { bubbles: true }));\r\n    }\r\n\r\n    const handleChange = () => {\r\n        let file = inputRef.current.files[0]\r\n        var reader = new FileReader();\r\n        reader.onload = function (e) {\r\n            var data = e.target.result;\r\n            var workbook = XLSX.read(data, { type: 'binary' });\r\n            var worksheet = workbook.Sheets[workbook.SheetNames[0]];\r\n            var json = XLSX.utils.sheet_to_json(worksheet);\r\n            let payload = getDataSource(json)\r\n            dispatch({\r\n                type: ACTION_TYPE.SET_DATA_SOURCE,\r\n                payload\r\n            })\r\n            message.success('数据导入成功！')\r\n        };\r\n        if (file) {\r\n            reader.readAsBinaryString(file);\r\n        }\r\n    }\r\n\r\n    // prepare\r\n    useEffect(() => {\r\n        if (props.location.search) {\r\n            let { bomprogrameId } = getSearchObj(props.location.search)\r\n            if (bomprogrameId) {\r\n                updateMode(MODE_TYPE.PREVIEW)\r\n                getBom(bomprogrameId).then((res: any) => {\r\n                    let n = res.data.map((item, index) => {\r\n                        return {\r\n                            ...item,\r\n                            key: index\r\n                        }\r\n                    })\r\n                    dispatch({\r\n                        type: ACTION_TYPE.SET_DATA_SOURCE,\r\n                        payload: n\r\n                    })\r\n                })\r\n            }\r\n        } else {\r\n            updateMode(MODE_TYPE.CREATE)\r\n        }\r\n    }, [])\r\n\r\n    /**\r\n     * \r\n     * @param cb1 create 模式下的回调\r\n     * @param cb2 preview 模式下的回调\r\n     */\r\n    const distinguish_mode = (cb1, cb2) => {\r\n        if (mode === MODE_TYPE.CREATE) {\r\n            return cb1()\r\n        } else if (mode === MODE_TYPE.PREVIEW) {\r\n            return cb2()\r\n        }\r\n    }\r\n\r\n    const getTitle = useMemo(() => {\r\n        return distinguish_mode(() => {\r\n            return 'BOM 方案编辑'\r\n        }, () => {\r\n            return 'BOM 方案预览'\r\n        })\r\n    }, [mode])\r\n\r\n    return (\r\n        <>\r\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\r\n                <div className=\"bread-area\">\r\n                    <div style={{ paddingRight: '5px' }}>当前路径：</div>\r\n                    <Breadcrumb separator=\">\">\r\n                        <Breadcrumb.Item>\r\n                            <span className=\"bread-item\" onClick={() => { props.history.go(-1) }}>零件 BOM 列表</span>\r\n                        </Breadcrumb.Item>\r\n                        <Breadcrumb.Item>\r\n                            <span className=\"bread-item\">{getTitle}</span>\r\n                        </Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                </div>\r\n                <Card\r\n                    title={getTitle}\r\n                    extra={\r\n                        mode === 0 ?\r\n                            <Space size={16}>\r\n                                <Button shape=\"round\" type=\"default\" icon={<FolderOpenOutlined />} onClick={handleAdd}>导入方案</Button>\r\n                                <input type=\"file\" id=\"file\" name=\"file\" accept=\".XLS\" onChange={handleChange} ref={inputRef} style={{ display: 'none' }} />\r\n                                <Button shape=\"round\" type=\"primary\" onClick={handleSave}>保存修改</Button>\r\n                            </Space>\r\n                            : null\r\n                    }\r\n                >\r\n                    {\r\n                        mode === 0 ?\r\n                            <>\r\n                                <Form form={form} layout=\"inline\">\r\n                                    <Form.Item label=\"设备类型\" name=\"device_type\" className=\"form-item\">\r\n                                        <Select style={{ width: '200px' }} allowClear>\r\n                                            {\r\n                                                deviceTypes.length > 0 && deviceTypes.map(deviceType => (\r\n                                                    <Select.Option key={deviceType.Id} value={deviceType.Id}>{deviceType.Name + '(' + deviceType.MaterialCode + ')'}</Select.Option>\r\n                                                ))\r\n                                            }\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"BOM 方案名称\" name=\"bom_name\" className=\"form-item\" style={{ width: '450px' }}>\r\n                                        <Input />\r\n                                    </Form.Item>\r\n                                </Form>\r\n                                <Divider />\r\n                            </>\r\n                            : null\r\n                    }\r\n                    <PartTable dataSource={state} />\r\n                </Card>\r\n            </Space>\r\n        </>\r\n    )\r\n}","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\partConfiguration\\partConfigurationAdd\\typings.ts",[],"D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\partConfiguration\\partConfigurationAdd\\reducer.ts",[],"D:\\fuzzy work\\mes_web\\src\\api\\integratedconfig.ts",[],"D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\partConfiguration\\reducer.ts",["304"],"import { ACTION_TYPE } from \"./typings\";\r\nimport { fromJS } from 'immutable'\r\n\r\nfunction dataSourceReducer(state, action) {\r\n    const { type, payload } = action;\r\n    const _state = fromJS(state)\r\n\r\n    switch (type) {\r\n        case ACTION_TYPE.SET_TABLE_DATA:\r\n            return _state.set('tableData', payload.tableData).set('count', payload.total).toJS()\r\n        case ACTION_TYPE.SET_CURRENT_PAGE:\r\n            return _state.setIn(['searchInfo', 'page'], payload).toJS()\r\n        case ACTION_TYPE.SET_LIMIT_COUNT:\r\n            return _state.setIn(['searchInfo', 'limit'], payload).toJS()\r\n        case ACTION_TYPE.SET_SEARCH_INFO:\r\n            let newState = _state\r\n            Object.keys(payload).map(key => {\r\n                newState = newState.setIn(['searchInfo', key], payload[key])\r\n            })\r\n            return newState.toJS()\r\n        case ACTION_TYPE.CHANGE_FRESH_FLAG:\r\n            return _state.set('freshFlag', !_state.get('freshFlag')).toJS()\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport {\r\n    dataSourceReducer\r\n}","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\partConfiguration\\typings.ts",[],"D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\formConfiguration\\index.tsx",["305","306","307","308","309","310","311","312"],"import {\r\n    Space,\r\n    Breadcrumb,\r\n    Card,\r\n    Button,\r\n    Form,\r\n    Select,\r\n    Input,\r\n    Divider,\r\n    Table,\r\n    message,\r\n    Popconfirm\r\n} from 'antd'\r\nimport {\r\n    ExclamationCircleOutlined\r\n} from '@ant-design/icons'\r\nimport './form_configuration.less'\r\nimport { getMouldList, deleteMould } from '../../../api/integratedconfig'\r\nimport React, { useEffect, useReducer, useState } from 'react'\r\nimport { mouldListReducer } from './reducer'\r\nimport { ACTION_TYPE } from './typings'\r\nimport { PreviewForm } from '../../../components'\r\nimport { useDeviceTypes, usePositions } from '../../../hooks'\r\n\r\nexport default function FormConfiguration(props) {\r\n    const [form] = Form.useForm()\r\n    const [positionList, updatePositionList] = usePositions([])\r\n    const [deviceTypeList, updateDeviceTypeList] = useDeviceTypes([])\r\n\r\n    const [state, dispatch] = useReducer(mouldListReducer, {\r\n        tableData: [],\r\n        searchInfo: {\r\n            limit: 10,\r\n            page: 1\r\n        },\r\n        total: 0,\r\n        freshFlag: false\r\n    })\r\n\r\n    const handleAdd = () => {\r\n        props.history.push('/' + 'my-userid' + '/fc/add')\r\n    }\r\n\r\n    const columns = [\r\n        { title: '工单模板名称', dataIndex: 'Name', key: 'Name' },\r\n        { title: '岗位', dataIndex: 'PositionName', key: 'PositionName' },\r\n        { title: '设备类型', dataIndex: 'TypeName', key: 'TypeName' },\r\n        {\r\n            title: '操作', render: (text, record) => (\r\n                <Space size={16}>\r\n                    <Button type=\"primary\" shape=\"round\" size=\"small\" onClick={handleEdit.bind(null, record)}>编辑</Button>\r\n                    <Popconfirm title=\"确认删除？\" icon={<ExclamationCircleOutlined style={{ color: 'red' }} />} onConfirm={handleDelete.bind(null, record)}>\r\n                        <Button type=\"primary\" shape=\"round\" danger size=\"small\">删除</Button>\r\n                    </Popconfirm>\r\n                </Space>\r\n            )\r\n        },\r\n    ]\r\n\r\n    const handleDelete = (record) => {\r\n        if (record.Id) {\r\n            deleteMould(record.Id).then((res: any) => {\r\n                if (res.code === 200) {\r\n                    message.success(res.msg)\r\n                    dispatch({\r\n                        type: ACTION_TYPE.CHANGE_FRESH_FLAG\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleEdit = (record) => {\r\n        if (record.Id) {\r\n            props.history.push('/' + 'my-userid' + '/fc/add?Id=' + record.Id)\r\n        }\r\n    }\r\n\r\n    const handleSearch = (values) => {\r\n        const { typeId, positionId } = values\r\n        dispatch({\r\n            type: ACTION_TYPE.SET_SEARCH_INFO,\r\n            payload: {\r\n                typeId,\r\n                positionId\r\n            }\r\n        })\r\n    }\r\n\r\n    const expandedRowRender = (e) => {\r\n        if (e.Mould) {\r\n            let state = JSON.parse(e.Mould)\r\n            console.log(JSON.parse(e.Mould))\r\n            return <PreviewForm basicOptions={state.basicOptions} formItemProps={state.formProps} />\r\n        }\r\n        return null\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('effect')\r\n        getMouldList({\r\n            limit: state.searchInfo.limit,\r\n            page: state.searchInfo.page,\r\n            typeId: state.searchInfo.typeId || '',\r\n            positionId: state.searchInfo.positionId || ''\r\n        }).then((res: any) => {\r\n            if (res.code === 200) {\r\n                let n = res.data.map((item) => ({\r\n                    ...item,\r\n                    key: item.Id\r\n                }))\r\n                dispatch({\r\n                    type: ACTION_TYPE.SET_DATA_SOURCE,\r\n                    payload: {\r\n                        tableData: n,\r\n                        total: res.count\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }, [state.searchInfo.typeId, state.searchInfo.positionId, state.searchInfo.limit, state.searchInfo.page, state.freshFlag])\r\n\r\n    return (\r\n        <>\r\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\r\n                <div className=\"bread-area\">\r\n                    <div style={{ paddingRight: '5px' }}>当前路径：</div>\r\n                    <Breadcrumb separator=\">\">\r\n                        <Breadcrumb.Item>\r\n                            <span className=\"bread-item\">工单模板列表</span>\r\n                        </Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                </div>\r\n                <Card\r\n                    title=\"工单模板列表\"\r\n                    extra={\r\n                        <Space size={16}>\r\n                            {/* <Button shape=\"round\" type=\"default\" icon={<FolderOpenOutlined />}>导入方案</Button> */}\r\n                            <Button shape=\"round\" type=\"primary\" onClick={handleAdd}>添加模板</Button>\r\n                        </Space>\r\n                    }\r\n                >\r\n                    <Form form={form} layout=\"inline\" onFinish={handleSearch}>\r\n                        <Form.Item label=\"设备类型\" name=\"typeId\" className=\"form-item\">\r\n                            <Select style={{ width: '200px' }} allowClear>\r\n                                {\r\n                                    deviceTypeList.length > 0 && deviceTypeList.map(deviceType => (\r\n                                        <Select.Option key={deviceType.Id} value={deviceType.Id}>{deviceType.Name + '(' + deviceType.MaterialCode + ')'}</Select.Option>\r\n                                    ))\r\n                                }\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item label=\"岗位\" name=\"positionId\" className=\"form-item\">\r\n                            <Select style={{ width: '200px' }} allowClear>\r\n                                {\r\n                                    positionList.length > 0 && positionList.map(position => (\r\n                                        <Select.Option key={position.Id} value={position.Id}>{position.Name}</Select.Option>\r\n                                    ))\r\n                                }\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                查询\r\n                        </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                    <Divider />\r\n                    <Card\r\n                        headStyle={{ fontWeight: 'bold', padding: 0 }}\r\n                        bodyStyle={{ padding: 0 }}\r\n                        bordered={false}\r\n                    >\r\n                        <Table\r\n                            bordered\r\n                            columns={columns}\r\n                            dataSource={state.tableData}\r\n                            expandable={{ expandedRowRender }}\r\n                            pagination={{\r\n                                showSizeChanger: true,\r\n                                onShowSizeChange: (current, size) => {\r\n                                    dispatch({\r\n                                        type: ACTION_TYPE.SET_LIMIT_COUNT,\r\n                                        payload: size\r\n                                    })\r\n                                },\r\n                                onChange: (page, pageSize) => {\r\n                                    dispatch({\r\n                                        type: ACTION_TYPE.SET_CURRENT_PAGE,\r\n                                        payload: page\r\n                                    })\r\n                                },\r\n                                showTotal: total => `共 ${total} 条`,\r\n                                total: state.total,\r\n                                pageSizeOptions: ['5', '10', '15', '20']\r\n                            }}\r\n                        />\r\n                    </Card>\r\n                </Card>\r\n            </Space>\r\n        </>\r\n    )\r\n}","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\formConfiguration\\formConfigurationAdd\\index.tsx",["313","314","315","316","317","318","319","320"],"import React, { useEffect, useMemo, useReducer, useState } from 'react'\r\nimport {\r\n    Card,\r\n    Space,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Form,\r\n    Input,\r\n    Select,\r\n    Switch,\r\n    Table,\r\n    message,\r\n    Popconfirm,\r\n    Breadcrumb,\r\n    List\r\n} from 'antd'\r\nimport { SortableContainer, SortableElement, SortableHandle } from 'react-sortable-hoc'\r\nimport arrayMove from 'array-move';\r\nimport './form_configuration.less'\r\nimport { MenuOutlined } from '@ant-design/icons';\r\nimport {\r\n    PreviewForm\r\n} from '../../../../components'\r\nimport { formOptionsReducer } from './reducer'\r\nimport { ACTION_TYPE, MODE_TYPE, INPUT_TYPE } from './typings'\r\nimport { addMould, getMouldById, updateMould } from '../../../../api/integratedconfig'\r\nimport { usePositions, useDeviceTypes } from '../../../../hooks'\r\nimport { getSearchObj } from '../../../../tools';\r\n\r\n\r\nconst SortableItem = SortableElement(props => <tr {...props} />);\r\nconst SortableList = SortableContainer(props => <tbody {...props} />);\r\nconst { Option } = Select;\r\n\r\nexport default function FormConfigurationAdd(props) {\r\n    const [positionList, updatePositionList] = usePositions([])\r\n    const [deviceTypeList, updateDeviceTypeList] = useDeviceTypes([])\r\n    const [needSelct, updateNeedSelect] = useState<boolean>(false)\r\n    const [form1] = Form.useForm()\r\n    const [form2] = Form.useForm()\r\n    // reducer\r\n    const [state, dispatch] = useReducer(formOptionsReducer, {\r\n        basicOptions: {},\r\n        formProps: [],\r\n        formPropsIndex: 0,\r\n        mode: null\r\n    })\r\n\r\n    const DragHandle = SortableHandle(() => (\r\n        <MenuOutlined style={{ cursor: 'pointer', color: '#999' }} />\r\n    ));\r\n\r\n    const columns = [\r\n        { dataIndex: 'sort', width: 50, className: 'drag-visible', render: () => <DragHandle /> },\r\n        { title: '工单子项名称', dataIndex: 'item_name', className: 'drag-visible', },\r\n        {\r\n            title: '操作', width: 150, render: (text, record) => (\r\n                <Space size={16}>\r\n                    {/* <Button type=\"default\" size=\"small\" shape=\"round\" onClick={handleEditFormProps.bind(null, record)}>编辑</Button> */}\r\n                    <Popconfirm\r\n                        placement=\"right\"\r\n                        title=\"确定要删除该项？\"\r\n                        onConfirm={handleDeleteFormProps.bind(null, record)}\r\n                        okText=\"确定\"\r\n                        cancelText=\"取消\"\r\n                    >\r\n                        <Button type=\"primary\" size=\"small\" shape=\"round\" danger>删除</Button>\r\n                    </Popconfirm>\r\n                </Space>\r\n            )\r\n        },\r\n    ]\r\n\r\n    const onSortEnd = ({ oldIndex, newIndex }) => {\r\n        if (oldIndex !== newIndex) {\r\n            const newData = arrayMove([].concat(state.formProps), oldIndex, newIndex).filter(el => !!el);\r\n            // console.log('Sorted items: ', newData);\r\n            dispatch({\r\n                type: ACTION_TYPE.SET_FORM_PROPS,\r\n                payload: newData\r\n            })\r\n        }\r\n    };\r\n\r\n    const DraggableBodyRow = ({ className, style, ...restProps }) => {\r\n        // function findIndex base on Table rowKey props and should always be a right array index\r\n        const index = state.formProps.findIndex(x => x.index === restProps['data-row-key']);\r\n        return <SortableItem index={index} {...restProps} />;\r\n    };\r\n\r\n    const DraggableContainer = props => (\r\n        <SortableList\r\n            useDragHandle\r\n            helperClass=\"row-dragging\"\r\n            onSortEnd={onSortEnd}\r\n            {...props}\r\n        />\r\n    );\r\n\r\n    const handleEditFormProps = () => {\r\n\r\n    }\r\n\r\n    const handleDeleteFormProps = (e) => {\r\n        dispatch({\r\n            type: ACTION_TYPE.DELETE_FORM_PROP,\r\n            payload: e\r\n        })\r\n        message.info('工单项已删除！')\r\n    }\r\n\r\n    // 工单基本配置提交\r\n    const handleSaveOptions = () => {\r\n        let { form_name, belong_work, device_type } = form1.getFieldsValue()\r\n        dispatch({\r\n            type: ACTION_TYPE.SET_BASIC_OPTIONS,\r\n            payload: {\r\n                form_name,\r\n                belong_work,\r\n                device_type\r\n            }\r\n        })\r\n    }\r\n\r\n    // 添加工单子项提交\r\n    const handleAddItem = () => {\r\n        const {\r\n            item_name,\r\n            item_description,\r\n            item_submit_type,\r\n            item_is_required,\r\n            item_is_readonly,\r\n            item_span,\r\n            item_select_items\r\n        } = form2.getFieldsValue()\r\n        if (item_name && item_submit_type && item_span) {\r\n            dispatch({\r\n                type: ACTION_TYPE.SET_FORM_PROPS,\r\n                payload: [\r\n                    ...state.formProps,\r\n                    {\r\n                        item_name,\r\n                        item_description,\r\n                        item_submit_type,\r\n                        item_is_required,\r\n                        item_is_readonly,\r\n                        item_span,\r\n                        item_select_items,\r\n                        key: state.formPropsIndex,\r\n                        index: state.formPropsIndex\r\n                    }\r\n                ]\r\n            })\r\n            dispatch({\r\n                type: ACTION_TYPE.ADD_FORM_PROPS_INDEX\r\n            })\r\n        } else {\r\n            message.warning(\"必要信息未填！\")\r\n        }\r\n    }\r\n\r\n    const handleSaveFormModel = () => {\r\n        if (!state.basicOptions.form_name || !state.basicOptions.belong_work || !state.basicOptions.device_type) return message.warn('工单基本配置未填写完整或未保存！')\r\n        if (state.formProps.length === 0) return message.warn('尚未添加工单子项！')\r\n        if (state.mode === MODE_TYPE.CREATE) {\r\n            addMould({\r\n                Name: state.basicOptions.form_name,\r\n                TypeId: state.basicOptions.device_type,\r\n                PositionId: state.basicOptions.belong_work,\r\n                Mould: JSON.stringify(state)\r\n            }).then((res: any) => {\r\n                if (res.code === 200) {\r\n                    message.success(res.msg)\r\n                }\r\n            })\r\n        } else if (state.mode === MODE_TYPE.EDIT) {\r\n            let { Id } = getSearchObj(props.location.search)\r\n            if (!Id) return\r\n            updateMould({\r\n                Id,\r\n                Name: state.basicOptions.form_name,\r\n                TypeId: state.basicOptions.device_type,\r\n                PositionId: state.basicOptions.belong_work,\r\n                Mould: JSON.stringify(state)\r\n            }).then((res: any) => {\r\n                if (res.code === 200) {\r\n                    message.success(res.msg)\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const handleChange = (changedValues) => {\r\n        if (Object.hasOwnProperty.call(changedValues, 'item_submit_type')) {\r\n            const { item_submit_type } = changedValues\r\n            if (item_submit_type === INPUT_TYPE.SELECT) {\r\n                return updateNeedSelect(true)\r\n            }\r\n            updateNeedSelect(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.location.search) { // edit mode\r\n            let { Id } = getSearchObj(props.location.search)\r\n            dispatch({\r\n                type: ACTION_TYPE.CHANGE_MODE,\r\n                payload: MODE_TYPE.EDIT\r\n            })\r\n            Id && getMouldById(Id).then((res: any) => {\r\n                if (res.code === 200) {\r\n                    let { Name, PositionId, TypeId, Mould } = res.data[0]\r\n                    let { formProps } = JSON.parse(Mould)\r\n                    form1.setFieldsValue({\r\n                        form_name: Name,\r\n                        belong_work: PositionId,\r\n                        device_type: TypeId\r\n                    })\r\n                    dispatch({\r\n                        type: ACTION_TYPE.SET_FORM_PROPS_INDEX,\r\n                        payload: formProps.length\r\n                    })\r\n                    dispatch({\r\n                        type: ACTION_TYPE.SET_BASIC_OPTIONS,\r\n                        payload: {\r\n                            form_name: Name,\r\n                            belong_work: PositionId,\r\n                            device_type: TypeId\r\n                        }\r\n                    })\r\n                    dispatch({\r\n                        type: ACTION_TYPE.SET_FORM_PROPS,\r\n                        payload: formProps\r\n                    })\r\n                }\r\n            })\r\n        } else { // create mode\r\n            dispatch({\r\n                type: ACTION_TYPE,\r\n                payload: MODE_TYPE.CREATE\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    const isForm1BtnValiable = useMemo(() => {\r\n        if (!state.basicOptions.form_name || !state.basicOptions.belong_work || !state.basicOptions.device_type) {\r\n            return true\r\n        }\r\n        return false\r\n    }, [state.basicOptions.form_name, state.basicOptions.belong_work, state.basicOptions.device_type])\r\n\r\n    return (\r\n        <>\r\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\r\n                <div className=\"bread-area\">\r\n                    <div style={{ paddingRight: '5px' }}>当前路径：</div>\r\n                    <Breadcrumb separator=\">\">\r\n                        <Breadcrumb.Item>\r\n                            <span className=\"bread-item\" onClick={() => { props.history.go(-1) }}>工单模板列表</span>\r\n                        </Breadcrumb.Item>\r\n                        <Breadcrumb.Item>\r\n                            <span className=\"bread-item\">工单配置</span>\r\n                        </Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                </div>\r\n                <Card\r\n                    title=\"工单配置\"\r\n                    bodyStyle={{ padding: '2px 16px 14px 16px', background: '#fafafa' }}\r\n                    extra={<Button type=\"primary\" shape=\"round\" onClick={handleSaveFormModel}>提交保存</Button>}\r\n                >\r\n                    <Row gutter={16}>\r\n                        <Col span={12}>\r\n                            <Space direction=\"vertical\" size={16} style={{ width: '100%' }}>\r\n                                <Card\r\n                                    title=\"工单基本配置\"\r\n                                    bodyStyle={{ padding: '12px 20px' }}\r\n                                    extra={<Button type='primary' shape=\"round\" onClick={handleSaveOptions} disabled={isForm1BtnValiable}>提交保存</Button>}\r\n                                >\r\n                                    <Form\r\n                                        layout=\"inline\"\r\n                                        form={form1}\r\n                                    >\r\n                                        <Form.Item label=\"工单名称\" name=\"form_name\">\r\n                                            <Input placeholder=\"请输入工单名称\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item label=\"所属岗位\" name=\"belong_work\">\r\n                                            <Select style={{ width: '200px' }}>\r\n                                                {\r\n                                                    positionList.length > 0 && positionList.map(position => (\r\n                                                        <Select.Option key={position.Id} value={position.Id}>{position.Name}</Select.Option>\r\n                                                    ))\r\n                                                }\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                        <Form.Item label=\"所属设备类型\" name=\"device_type\">\r\n                                            <Select style={{ width: '200px' }}>\r\n                                                {\r\n                                                    deviceTypeList.length > 0 && deviceTypeList.map(deviceType => (\r\n                                                        <Select.Option key={deviceType.Id} value={deviceType.Id}>{deviceType.Name + '(' + deviceType.MaterialCode + ')'}</Select.Option>\r\n                                                    ))\r\n                                                }\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                    </Form>\r\n                                </Card>\r\n                                <Card\r\n                                    title=\"新增工单子项\"\r\n                                    bodyStyle={{ padding: '12px 20px' }}\r\n                                    extra={<Button type=\"primary\" shape=\"round\" onClick={handleAddItem}>添加子项</Button>}\r\n                                >\r\n                                    <Form\r\n                                        form={form2}\r\n                                        layout=\"inline\"\r\n                                        initialValues={{\r\n                                            ['item_is_required']: true,\r\n                                            ['item_is_readonly']: false\r\n                                        }}\r\n                                        onValuesChange={handleChange}\r\n                                    >\r\n                                        <Form.Item label=\"工单子项名称\" name=\"item_name\">\r\n                                            <Input placeholder=\"请输入工单子项名称\" />\r\n                                        </Form.Item>\r\n                                        <Form.Item label=\"工单子项描述\" name=\"item_description\" style={{ width: '350px' }}>\r\n                                            <Input placeholder=\"请输入工单子项描述内容\" allowClear/>\r\n                                        </Form.Item>\r\n                                        <Form.Item label=\"工单子项输入形式\" name=\"item_submit_type\">\r\n                                            <Select style={{ width: '200px' }} allowClear>\r\n                                                <Select.Option value={INPUT_TYPE.INPUT}>文字输入</Select.Option>\r\n                                                <Select.Option value={INPUT_TYPE.SELECT}>下拉选择</Select.Option>\r\n                                                <Select.Option value={INPUT_TYPE.UPLOAD}>图片上传</Select.Option>\r\n                                                <Select.Option value={INPUT_TYPE.CHECK}>确认框</Select.Option>\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                        <Form.Item label=\"是否必填\" name=\"item_is_required\" valuePropName=\"checked\">\r\n                                            <Switch />\r\n                                        </Form.Item>\r\n                                        <Form.Item label=\"是否只读\" name=\"item_is_readonly\" valuePropName=\"checked\">\r\n                                            <Switch />\r\n                                        </Form.Item>\r\n                                        <Form.Item label=\"子项所占行距\" name=\"item_span\">\r\n                                            <Select style={{ width: '200px' }}>\r\n                                                <Select.Option value=\"8\">1/3 行</Select.Option>\r\n                                                <Select.Option value=\"12\">1/2 行</Select.Option>\r\n                                                <Select.Option value=\"24\">1 行</Select.Option>\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                        {\r\n                                            needSelct ?\r\n                                                <Form.Item label=\"下拉选项\" name=\"item_select_items\" style={{ width: '400px' }}>\r\n                                                    <Select mode=\"tags\" style={{ width: '100%' }} placeholder=\"请输入选项后回车确认\">\r\n                                                    </Select>\r\n                                                </Form.Item>\r\n                                                : null\r\n                                        }\r\n                                    </Form>\r\n                                </Card>\r\n                                <Card\r\n                                    title=\"工单子项列表\"\r\n                                    bodyStyle={{ padding: '0' }}\r\n                                >\r\n                                    <Table\r\n                                        pagination={false}\r\n                                        columns={columns}\r\n                                        dataSource={state.formProps}\r\n                                        rowKey=\"index\"\r\n                                        bordered\r\n                                        components={{\r\n                                            body: {\r\n                                                wrapper: DraggableContainer,\r\n                                                row: DraggableBodyRow,\r\n                                            },\r\n                                        }}\r\n                                    />\r\n                                </Card>\r\n                            </Space>\r\n                        </Col>\r\n                        <Col span={12}>\r\n                            <Space direction=\"vertical\" size={16} style={{ width: '100%' }}>\r\n                                <Card\r\n                                    title=\"工单预览\"\r\n                                    bodyStyle={{ padding: '0 25px 25px 25px' }}\r\n                                >\r\n                                    <PreviewForm basicOptions={state.basicOptions} formItemProps={state.formProps} />\r\n                                </Card>\r\n                            </Space>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </Card>\r\n            </Space>\r\n        </>\r\n    )\r\n}\r\n","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\formConfiguration\\formConfigurationAdd\\reducer.ts",[],"D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\formConfiguration\\formConfigurationAdd\\typings.ts",[],"D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\formConfiguration\\reducer.ts",["321"],"import { ACTION_TYPE, IState } from './typings'\r\nimport { fromJS } from 'immutable'\r\n\r\nfunction mouldListReducer(state: IState, action) {\r\n    const { type, payload } = action\r\n    const _state = fromJS(state)\r\n\r\n    switch (type) {\r\n        case ACTION_TYPE.SET_DATA_SOURCE:\r\n            return _state.set('tableData', payload.tableData).set('total', payload.total).toJS()\r\n        case ACTION_TYPE.SET_CURRENT_PAGE:\r\n            return _state.setIn(['searchInfo', 'page'], payload).toJS()\r\n        case ACTION_TYPE.SET_LIMIT_COUNT:\r\n            return _state.setIn(['searchInfo', 'limit'], payload).toJS()\r\n        case ACTION_TYPE.SET_SEARCH_INFO:\r\n            let newState = _state\r\n            Object.keys(payload).map(key => {\r\n                newState = newState.setIn(['searchInfo', key], payload[key])\r\n            })\r\n            return newState.toJS()\r\n        case ACTION_TYPE.CHANGE_FRESH_FLAG:\r\n            return _state.set('freshFlag', !_state.get('freshFlag')).toJS()\r\n        default:\r\n            return _state.toJS()\r\n    }\r\n}\r\n\r\nexport {\r\n    mouldListReducer\r\n}","D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\formConfiguration\\typings.ts",[],"D:\\fuzzy work\\mes_web\\src\\views\\integratedConfiguration\\processConfiguration\\processConfigurationAdd\\index.tsx",["322","323","324","325","326"],"import React, { FC, useEffect, useState } from 'react'\r\nimport {\r\n    Space,\r\n    Breadcrumb,\r\n    Card,\r\n    Button,\r\n    Form,\r\n    Select,\r\n    Input,\r\n    message\r\n} from 'antd'\r\nimport './process_configuration_add.less'\r\nimport { getBomPropsByTypeId, getMouldByTypeIdAndPositionId, addProgramme, getProgrammeById, updateProgramme } from '../../../../api/integratedconfig'\r\nimport { useDeviceTypes } from '../../../../hooks'\r\nimport { getSearchObj } from '../../../../tools'\r\n\r\nconst ProcessConfigurationAdd = (props) => {\r\n    const [deviceTypes, updateDeviceTypes] = useDeviceTypes([])\r\n    const [boms, updateBoms] = useState([])\r\n    const [products, updateProducts] = useState([])\r\n    const [tests, updateTests] = useState([])\r\n    const [stores, updateStores] = useState([])\r\n    const [typeId, updateTypeId] = useState(null)\r\n    const [form1] = Form.useForm()\r\n\r\n    const handleChange = (changeField) => {\r\n        if (Object.hasOwnProperty.call(changeField, 'typeId')) {\r\n            updateTypeId(changeField.typeId || null)\r\n        }\r\n    }\r\n\r\n    const handleSave = () => {\r\n        let { name, typeId, bom, product, test, store } = form1.getFieldsValue()\r\n        if (!name || !typeId || !bom || !product || !test || !store) return message.warn('信息未填写完整!')\r\n        if (props.location.search) { // edit mode\r\n            let { Id } = getSearchObj(props.location.search)\r\n            updateProgramme({\r\n                Id,\r\n                Name: name,\r\n                BomProgrammeId: bom,\r\n                ProducerMouldId: product,\r\n                QualityInspectorMouldId: test,\r\n                GodownKeeperMouldId: store,\r\n                TypeId: typeId\r\n            }).then((res: any) => {\r\n                if (res.code == 200) {\r\n                    message.success(res.msg)\r\n                }\r\n            })\r\n        } else { // create mode\r\n            addProgramme({\r\n                Name: name,\r\n                BomProgrammeId: bom,\r\n                ProducerMouldId: product,\r\n                QualityInspectorMouldId: test,\r\n                GodownKeeperMouldId: store,\r\n                TypeId: typeId\r\n            }).then((res: any) => {\r\n                if (res.code == 200) {\r\n                    message.success(res.msg)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!typeId) return\r\n        // bom\r\n        getBomPropsByTypeId(typeId).then((res: any) => {\r\n            if (res.code === 200) updateBoms(res.data)\r\n        })\r\n        // 生产 1\r\n        getMouldByTypeIdAndPositionId(typeId, 1).then((res: any) => {\r\n            if (res.code === 200) updateProducts(res.data)\r\n        })\r\n        // 质检 2\r\n        getMouldByTypeIdAndPositionId(typeId, 2).then((res: any) => {\r\n            if (res.code === 200) updateTests(res.data)\r\n        })\r\n        // 仓库 3\r\n        getMouldByTypeIdAndPositionId(typeId, 3).then((res: any) => {\r\n            if (res.code === 200) updateStores(res.data)\r\n        })\r\n    }, [typeId])\r\n\r\n    useEffect(() => {\r\n        if (props.location.search) {\r\n            let { Id } = getSearchObj(props.location.search)\r\n            Id && getProgrammeById(Id).then((res: any) => {\r\n                console.log(res)\r\n                if (res.code === 200) {\r\n                    let { Name, TypeId, BomProgrammeId, ProducerMouldId, QualityInspectorMouldId, GodownKeeperMouldId } = res.data[0]\r\n                    form1.setFieldsValue({\r\n                        name: Name,\r\n                        typeId: TypeId,\r\n                        bom: BomProgrammeId,\r\n                        product: ProducerMouldId,\r\n                        test: QualityInspectorMouldId,\r\n                        store: GodownKeeperMouldId\r\n                    })\r\n                    updateTypeId(TypeId)\r\n                }\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\r\n                <div className=\"bread-area\">\r\n                    <div style={{ paddingRight: '5px' }}>当前路径：</div>\r\n                    <Breadcrumb separator=\">\">\r\n                        <Breadcrumb.Item>\r\n                            <span className=\"bread-item\" onClick={() => { props.history.go(-1) }}>综合方案列表</span>\r\n                        </Breadcrumb.Item>\r\n                        <Breadcrumb.Item>\r\n                            <span className=\"bread-item\">方案编辑</span>\r\n                        </Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                </div>\r\n\r\n                <Card\r\n                    title=\"方案编辑\"\r\n                    headStyle={{ fontWeight: 'bold' }}\r\n                    extra={\r\n                        <Space size={16}>\r\n                            <Button type=\"primary\" shape=\"round\" onClick={handleSave}>提交保存</Button>\r\n                        </Space>\r\n                    }\r\n                >\r\n                    <Form form={form1} onValuesChange={handleChange}>\r\n                        <Form.Item label=\"方案名称\" name=\"name\">\r\n                            <Input placeholder=\"请输入方案名称\" style={{ width: '250px' }} />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"设备类型\" name=\"typeId\">\r\n                            <Select style={{ width: '250px' }} allowClear>\r\n                                {\r\n                                    deviceTypes.length > 0 && deviceTypes.map(deviceType => (\r\n                                        <Select.Option key={deviceType.Id} value={deviceType.Id}>{deviceType.Name + '(' + deviceType.MaterialCode + ')'}</Select.Option>\r\n                                    ))\r\n                                }\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <div className={typeId ? \"warn-text hide-text\" : \"warn-text\"}>请先选择设备类型</div>\r\n                        <Form.Item label=\"BOM方案\" name=\"bom\">\r\n                            <Select style={{ width: '250px' }} disabled={!typeId}>\r\n                                {\r\n                                    boms.length > 0 && boms.map(bom => (\r\n                                        <Select.Option key={bom.Id} value={bom.Id}>{bom.Name}</Select.Option>\r\n                                    ))\r\n                                }\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item label=\"生产工单模板\" name=\"product\">\r\n                            <Select style={{ width: '250px' }} disabled={!typeId}>\r\n                                {\r\n                                    products.length > 0 && products.map(product => (\r\n                                        <Select.Option key={product.Id} value={product.Id}>{product.Name}</Select.Option>\r\n                                    ))\r\n                                }\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item label=\"质检工单模板\" name=\"test\">\r\n                            <Select style={{ width: '250px' }} disabled={!typeId}>\r\n                                {\r\n                                    tests.length > 0 && tests.map(test => (\r\n                                        <Select.Option key={test.Id} value={test.Id}>{test.Name}</Select.Option>\r\n                                    ))\r\n                                }\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item label=\"仓库工单模板\" name=\"store\">\r\n                            <Select style={{ width: '250px' }} disabled={!typeId}>\r\n                                {\r\n                                    stores.length > 0 && stores.map(store => (\r\n                                        <Select.Option key={store.Id} value={store.Id}>{store.Name}</Select.Option>\r\n                                    ))\r\n                                }\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Card>\r\n            </Space>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProcessConfigurationAdd","D:\\fuzzy work\\mes_web\\src\\views\\todoThings\\checkForm\\index.tsx",["327"],"import {\r\n    Card,\r\n    Form,\r\n    DatePicker,\r\n    Input,\r\n    Select,\r\n    Button,\r\n    Divider,\r\n    Space,\r\n    Table,\r\n    Breadcrumb\r\n} from 'antd'\r\nimport {\r\n    FilterTwoTone\r\n} from '@ant-design/icons'\r\nimport moment from 'moment'\r\nimport React from 'react'\r\nimport './check_form.less'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nconst CheckFormData = [\r\n    { key: '1', check_form_id: 123456, order_number: 'GD202001060001', device_ID: '02020103', device_type: '智能防盗型保护接地箱（直立式）无监测', device_count: 10, response_man: '张三', post_time: '2021-03-11', check_man: '李四', check_time: \"2020-03-12\", status: '已送检' },\r\n    { key: '2', check_form_id: 123455, order_number: 'GD202001060001', device_ID: '02020103', device_type: '智能防盗型保护接地箱（直立式）无监测', device_count: 10, response_man: '张三', post_time: '2021-03-12', check_man: '李四', check_time: \"2020-03-12\", status: '待确认' }\r\n]\r\n\r\nconst CheckForm = (props) => {\r\n    const columns = [\r\n        { title: '送检单ID', dataIndex: 'check_form_id', key: 'check_form_id', width: 100 },\r\n        { title: '生产订单号', dataIndex: 'order_number', key: 'order_number', width: 150 },\r\n        { title: '产品料号', dataIndex: 'device_ID', key: 'device_ID', width: 100 },\r\n        { title: '产品类型', dataIndex: 'device_type', key: 'device_type', width: 300 },\r\n        { title: '产品数量', dataIndex: 'device_count', key: 'device_count', width: 100 },\r\n        { title: '生产人员', dataIndex: 'response_man', key: 'response_man', width: 100 },\r\n        { title: '上传时间', dataIndex: 'post_time', key: 'post_time', width: 150 },\r\n        { title: '确认人员', dataIndex: 'check_man', man: 'check_man', width: 100 },\r\n        { title: '确认时间', dataIndex: 'check_time', key: 'check_time', width: 150 },\r\n        {\r\n            title: '状态', dataIndex: 'status', key: 'status', filters: [\r\n                {\r\n                    text: '已送检',\r\n                    value: '已送检',\r\n                },\r\n                {\r\n                    text: '待确认',\r\n                    value: '待确认',\r\n                },\r\n            ],\r\n            filterMultiple: false,\r\n            filterIcon: <FilterTwoTone style={{ fontSize: '15px' }} />,\r\n            onFilter: (value, record) => record.status === value,\r\n            width: 100,\r\n            fixed: 'right' as 'right',\r\n            render: (text, record) => {\r\n                return (\r\n                    <div style={record.status === '已送检' ? { color: \"green\" } : { color: \"red\" }}>{record.status}</div>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            title: '操作', width: 100, fixed: 'right' as 'right', render: (text, record) => {\r\n                return (\r\n                    <Button type=\"primary\" size=\"small\" shape=\"round\" onClick={handleCheck.bind(null, record)}>查看</Button>\r\n                )\r\n            }\r\n        },\r\n    ]\r\n\r\n    const handleCheck = (record) => {\r\n        props.history.push(`/:userID/cf/check/${record.check_form_id}`)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Space direction=\"vertical\" size={8} style={{ width: '100%' }}>\r\n                <div className=\"bread-area\">\r\n                    <div style={{ paddingRight: '5px' }}>当前路径：</div>\r\n                    <Breadcrumb separator=\">\">\r\n                        <Breadcrumb.Item>\r\n                            <span className=\"bread-item\">送检单台账</span>\r\n                        </Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                </div>\r\n                <Card title=\"送检单台账\" headStyle={{ fontWeight: 'bold' }}>\r\n                    <Form layout=\"inline\">\r\n                        <Form.Item label=\"生产订单编号\" name=\"order_num\">\r\n                            <Input placeholder=\"请输入生产订单编号\" />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"订单时间\" name=\"order_time\">\r\n                            <RangePicker\r\n                                ranges={{\r\n                                    '今天': [moment(), moment()],\r\n                                    '本月': [moment().startOf('month'), moment().endOf('month')],\r\n                                }}\r\n                            />\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                查询\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                    <Divider />\r\n                    <Table scroll={{ x: 1450 }} bordered columns={columns} dataSource={CheckFormData}></Table>\r\n                </Card>\r\n\r\n            </Space>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CheckForm","D:\\fuzzy work\\mes_web\\src\\views\\todoThings\\checkForm\\checkForm_detail\\index.tsx",[],"D:\\fuzzy work\\mes_web\\src\\views\\productionOrders\\productionOrdersAddWork\\reducer.ts",[],"D:\\fuzzy work\\mes_web\\src\\views\\productionOrders\\productionOrdersAddWork\\typings.ts",[],"D:\\fuzzy work\\mes_web\\src\\views\\ordersStandingBook\\reducer.ts",["328"],"import { fromJS } from 'immutable'\r\nimport { ACTION_TYPE, IState } from './typings'\r\n\r\nfunction orderStandingBookReducer(state: IState, action) {\r\n    const { type, payload } = action;\r\n    const _state = fromJS(state)\r\n\r\n    switch (type) {\r\n        case ACTION_TYPE.SET_TABLE_DATA:\r\n            return _state.set('tableData', payload.tableData).set('total', payload.total).toJS()\r\n        case ACTION_TYPE.SET_CURRENT_PAGE:\r\n            return _state.setIn(['searchInfo', 'page'], payload).toJS()\r\n        case ACTION_TYPE.SET_LIMIT_COUNT:\r\n            return _state.setIn(['searchInfo', 'limit'], payload).toJS()\r\n        case ACTION_TYPE.SET_SEARCH_INFO:\r\n            let newState = _state\r\n            Object.keys(payload).map(key => {\r\n                newState = newState.setIn(['searchInfo', key], payload[key])\r\n            })\r\n            return newState.toJS()\r\n        default:\r\n            return _state.toJS()\r\n    }\r\n}\r\n\r\nexport {\r\n    orderStandingBookReducer\r\n}","D:\\fuzzy work\\mes_web\\src\\views\\ordersStandingBook\\typings.ts",[],"D:\\fuzzy work\\mes_web\\src\\api\\orderbook.ts",[],"D:\\fuzzy work\\mes_web\\src\\components\\UserSelect\\index.tsx",["329","330","331"],"import React, { FC, ReactNode, useEffect, useState } from 'react'\r\nimport { Select } from 'antd'\r\nimport { getUsersList } from '../../api/staff'\r\n\r\ninterface IProps {\r\n    form: any,\r\n    name: string\r\n}\r\n\r\nconst UserSelect: FC<IProps> = ({ form, name }) => {\r\n    const [userList, updateUserList] = useState([])\r\n\r\n    useEffect(() => {\r\n        getUsersList().then((res: any) => {\r\n            if (res.code === 200) {\r\n                let n = res.data.map(item => ({\r\n                    Name: item.Name,\r\n                    Id: item.Id\r\n                }))\r\n                updateUserList(n)\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const handleSelect = (value) => {\r\n        let newVal = new Object\r\n        newVal[name] = value\r\n        form.setFieldsValue(newVal)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Select\r\n                style={{ width: '120px' }}\r\n                allowClear\r\n                value={form.getFieldValue(name)}\r\n                onChange={handleSelect}\r\n            >\r\n                {\r\n                    userList.length !== 0 && userList.map(user => {\r\n                        return <Select.Option value={user.Id} key={user.Id}>{user.Name}</Select.Option>\r\n                    })\r\n                }\r\n            </Select>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UserSelect","D:\\fuzzy work\\mes_web\\src\\components\\DeviceTypesSelect\\index.tsx",["332","333","334","335"],"import React, { FC, useEffect, useState } from 'react'\r\nimport { Select } from 'antd'\r\nimport { getDeviceTypes } from '../../api/product'\r\n\r\ninterface IProps {\r\n    form: any,\r\n    name: string,\r\n    dispatch?: any\r\n}\r\n\r\nconst DeviceTypesSelect: FC<IProps> = ({ form, name, dispatch }) => {\r\n    const [deviceTypes, updateDeviceTypes] = useState([])\r\n\r\n    useEffect(() => {\r\n        getDeviceTypes().then((res: any) => {\r\n            if (res.code === 200) {\r\n                updateDeviceTypes(res.data)\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const handleSelect = (value) => {\r\n        let newVal = new Object\r\n        newVal[name] = value\r\n        form.setFieldsValue(newVal)\r\n        if (dispatch) {\r\n            dispatch(value)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        let val = form.getFieldValue(name)\r\n        if (val && dispatch) {\r\n            dispatch(val)\r\n        }\r\n    }, [form.getFieldValue(name)])\r\n\r\n\r\n    return (\r\n        <Select\r\n            style={{ width: '200px' }}\r\n            allowClear\r\n            value={form.getFieldValue(name)}\r\n            onChange={handleSelect}\r\n        >\r\n            {\r\n                deviceTypes.length > 0 && deviceTypes.map((deviceType) => (\r\n                    <Select.Option value={deviceType.Id} key={deviceType.Id}>{deviceType.Name + '(' + deviceType.MaterialCode + ')'}</Select.Option>\r\n                ))\r\n            }\r\n        </Select>\r\n    )\r\n}\r\n\r\nexport default DeviceTypesSelect","D:\\fuzzy work\\mes_web\\src\\components\\PositionSelect\\index.tsx",["336","337","338"],"import React, { FC, ReactNode, useEffect, useState } from 'react'\r\nimport { Select } from 'antd'\r\nimport { getPositions } from '../../api/orderbook'\r\n\r\ninterface IProps {\r\n    form: any,\r\n    name: string\r\n}\r\n\r\nconst PositionSelect: FC<IProps> = ({ form, name }) => {\r\n    const [positions, updatePositions] = useState([])\r\n\r\n    useEffect(() => {\r\n        getPositions().then((res: any) => {\r\n            if (res.code === 200) {\r\n                updatePositions(res.data)\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const handleSelect = (value) => {\r\n        let newVal = new Object\r\n        newVal[name] = value\r\n        form.setFieldsValue(newVal)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Select\r\n                style={{ width: '120px' }}\r\n                allowClear\r\n                value={form.getFieldValue(name)}\r\n                onChange={handleSelect}\r\n            >\r\n                {\r\n                    positions.length > 0 && positions.map((position) => (\r\n                        <Select.Option value={position.Id} key={position.Id}>{position.Name}</Select.Option>\r\n                    ))\r\n                }\r\n            </Select>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PositionSelect","D:\\fuzzy work\\mes_web\\src\\hooks\\index.ts",[],"D:\\fuzzy work\\mes_web\\src\\hooks\\useDeviceTypes.ts",[],"D:\\fuzzy work\\mes_web\\src\\hooks\\useUsers.ts",[],"D:\\fuzzy work\\mes_web\\src\\hooks\\usePositions.ts",[],"D:\\fuzzy work\\mes_web\\src\\components\\PartTable\\index.tsx",[],{"ruleId":"339","severity":1,"message":"340","line":4,"column":47,"nodeType":"341","messageId":"342","endLine":4,"endColumn":55},{"ruleId":"343","replacedBy":"344"},{"ruleId":"345","replacedBy":"346"},{"ruleId":"339","severity":1,"message":"347","line":9,"column":19,"nodeType":"341","messageId":"342","endLine":9,"endColumn":29},{"ruleId":"348","severity":1,"message":"349","line":24,"column":18,"nodeType":"350","messageId":"351","endLine":24,"endColumn":20},{"ruleId":"339","severity":1,"message":"352","line":1,"column":58,"nodeType":"341","messageId":"342","endLine":1,"endColumn":66},{"ruleId":"339","severity":1,"message":"353","line":32,"column":19,"nodeType":"341","messageId":"342","endLine":32,"endColumn":30},{"ruleId":"354","severity":1,"message":"355","line":63,"column":32,"nodeType":"356","messageId":"357","endLine":63,"endColumn":33},{"ruleId":"354","severity":1,"message":"355","line":63,"column":46,"nodeType":"356","messageId":"357","endLine":63,"endColumn":47},{"ruleId":"354","severity":1,"message":"355","line":69,"column":36,"nodeType":"356","messageId":"357","endLine":69,"endColumn":37},{"ruleId":"354","severity":1,"message":"355","line":69,"column":50,"nodeType":"356","messageId":"357","endLine":69,"endColumn":51},{"ruleId":"339","severity":1,"message":"352","line":1,"column":40,"nodeType":"341","messageId":"342","endLine":1,"endColumn":48},{"ruleId":"339","severity":1,"message":"358","line":26,"column":25,"nodeType":"341","messageId":"342","endLine":26,"endColumn":42},{"ruleId":"354","severity":1,"message":"355","line":65,"column":32,"nodeType":"356","messageId":"357","endLine":65,"endColumn":33},{"ruleId":"354","severity":1,"message":"355","line":65,"column":46,"nodeType":"356","messageId":"357","endLine":65,"endColumn":47},{"ruleId":"354","severity":1,"message":"355","line":70,"column":36,"nodeType":"356","messageId":"357","endLine":70,"endColumn":37},{"ruleId":"354","severity":1,"message":"355","line":70,"column":50,"nodeType":"356","messageId":"357","endLine":70,"endColumn":51},{"ruleId":"339","severity":1,"message":"352","line":1,"column":40,"nodeType":"341","messageId":"342","endLine":1,"endColumn":48},{"ruleId":"339","severity":1,"message":"353","line":31,"column":19,"nodeType":"341","messageId":"342","endLine":31,"endColumn":30},{"ruleId":"354","severity":1,"message":"355","line":60,"column":32,"nodeType":"356","messageId":"357","endLine":60,"endColumn":33},{"ruleId":"354","severity":1,"message":"355","line":60,"column":46,"nodeType":"356","messageId":"357","endLine":60,"endColumn":47},{"ruleId":"354","severity":1,"message":"355","line":79,"column":32,"nodeType":"356","messageId":"357","endLine":79,"endColumn":33},{"ruleId":"354","severity":1,"message":"355","line":79,"column":46,"nodeType":"356","messageId":"357","endLine":79,"endColumn":47},{"ruleId":"359","severity":1,"message":"360","line":143,"column":8,"nodeType":"361","endLine":143,"endColumn":10,"suggestions":"362"},{"ruleId":"359","severity":1,"message":"363","line":177,"column":8,"nodeType":"361","endLine":177,"endColumn":55,"suggestions":"364"},{"ruleId":"339","severity":1,"message":"365","line":13,"column":5,"nodeType":"341","messageId":"342","endLine":13,"endColumn":10},{"ruleId":"339","severity":1,"message":"352","line":1,"column":40,"nodeType":"341","messageId":"342","endLine":1,"endColumn":48},{"ruleId":"339","severity":1,"message":"353","line":23,"column":19,"nodeType":"341","messageId":"342","endLine":23,"endColumn":30},{"ruleId":"339","severity":1,"message":"366","line":24,"column":23,"nodeType":"341","messageId":"342","endLine":24,"endColumn":38},{"ruleId":"339","severity":1,"message":"358","line":17,"column":25,"nodeType":"341","messageId":"342","endLine":17,"endColumn":42},{"ruleId":"354","severity":1,"message":"355","line":40,"column":32,"nodeType":"356","messageId":"357","endLine":40,"endColumn":33},{"ruleId":"354","severity":1,"message":"355","line":40,"column":46,"nodeType":"356","messageId":"357","endLine":40,"endColumn":47},{"ruleId":"354","severity":1,"message":"355","line":44,"column":32,"nodeType":"356","messageId":"357","endLine":44,"endColumn":33},{"ruleId":"354","severity":1,"message":"355","line":44,"column":46,"nodeType":"356","messageId":"357","endLine":44,"endColumn":47},{"ruleId":"359","severity":1,"message":"367","line":48,"column":8,"nodeType":"361","endLine":48,"endColumn":10,"suggestions":"368"},{"ruleId":"369","severity":1,"message":"370","line":54,"column":86,"nodeType":"371","messageId":"372","endLine":54,"endColumn":105,"fix":"373"},{"ruleId":"339","severity":1,"message":"374","line":1,"column":17,"nodeType":"341","messageId":"342","endLine":1,"endColumn":26},{"ruleId":"339","severity":1,"message":"375","line":1,"column":46,"nodeType":"341","messageId":"342","endLine":1,"endColumn":57},{"ruleId":"339","severity":1,"message":"376","line":22,"column":24,"nodeType":"341","messageId":"342","endLine":22,"endColumn":32},{"ruleId":"339","severity":1,"message":"358","line":49,"column":25,"nodeType":"341","messageId":"342","endLine":49,"endColumn":42},{"ruleId":"359","severity":1,"message":"360","line":188,"column":8,"nodeType":"361","endLine":188,"endColumn":10,"suggestions":"377"},{"ruleId":"359","severity":1,"message":"378","line":210,"column":8,"nodeType":"361","endLine":210,"endColumn":49,"suggestions":"379"},{"ruleId":"339","severity":1,"message":"380","line":1,"column":31,"nodeType":"341","messageId":"342","endLine":1,"endColumn":40},{"ruleId":"343","replacedBy":"381"},{"ruleId":"345","replacedBy":"382"},{"ruleId":"339","severity":1,"message":"383","line":8,"column":5,"nodeType":"341","messageId":"342","endLine":8,"endColumn":10},{"ruleId":"339","severity":1,"message":"358","line":31,"column":25,"nodeType":"341","messageId":"342","endLine":31,"endColumn":42},{"ruleId":"359","severity":1,"message":"360","line":95,"column":8,"nodeType":"361","endLine":95,"endColumn":10,"suggestions":"384"},{"ruleId":"359","severity":1,"message":"385","line":116,"column":8,"nodeType":"361","endLine":116,"endColumn":14,"suggestions":"386"},{"ruleId":"348","severity":1,"message":"349","line":17,"column":42,"nodeType":"350","messageId":"351","endLine":17,"endColumn":44},{"ruleId":"339","severity":1,"message":"387","line":8,"column":5,"nodeType":"341","messageId":"342","endLine":8,"endColumn":10},{"ruleId":"339","severity":1,"message":"352","line":19,"column":40,"nodeType":"341","messageId":"342","endLine":19,"endColumn":48},{"ruleId":"339","severity":1,"message":"388","line":27,"column":26,"nodeType":"341","messageId":"342","endLine":27,"endColumn":44},{"ruleId":"339","severity":1,"message":"389","line":28,"column":28,"nodeType":"341","messageId":"342","endLine":28,"endColumn":48},{"ruleId":"354","severity":1,"message":"355","line":41,"column":32,"nodeType":"356","messageId":"357","endLine":41,"endColumn":33},{"ruleId":"354","severity":1,"message":"355","line":41,"column":46,"nodeType":"356","messageId":"357","endLine":41,"endColumn":47},{"ruleId":"354","severity":1,"message":"355","line":75,"column":36,"nodeType":"356","messageId":"357","endLine":75,"endColumn":37},{"ruleId":"354","severity":1,"message":"355","line":75,"column":50,"nodeType":"356","messageId":"357","endLine":75,"endColumn":51},{"ruleId":"339","severity":1,"message":"390","line":16,"column":5,"nodeType":"341","messageId":"342","endLine":16,"endColumn":9},{"ruleId":"339","severity":1,"message":"391","line":34,"column":9,"nodeType":"341","messageId":"342","endLine":34,"endColumn":15},{"ruleId":"339","severity":1,"message":"388","line":37,"column":26,"nodeType":"341","messageId":"342","endLine":37,"endColumn":44},{"ruleId":"339","severity":1,"message":"389","line":38,"column":28,"nodeType":"341","messageId":"342","endLine":38,"endColumn":48},{"ruleId":"339","severity":1,"message":"392","line":101,"column":11,"nodeType":"341","messageId":"342","endLine":101,"endColumn":30},{"ruleId":"359","severity":1,"message":"393","line":245,"column":8,"nodeType":"361","endLine":245,"endColumn":10,"suggestions":"394"},{"ruleId":"369","severity":1,"message":"395","line":317,"column":45,"nodeType":"371","messageId":"372","endLine":317,"endColumn":71,"fix":"396"},{"ruleId":"369","severity":1,"message":"397","line":318,"column":45,"nodeType":"371","messageId":"372","endLine":318,"endColumn":72,"fix":"398"},{"ruleId":"348","severity":1,"message":"349","line":17,"column":42,"nodeType":"350","messageId":"351","endLine":17,"endColumn":44},{"ruleId":"339","severity":1,"message":"399","line":1,"column":17,"nodeType":"341","messageId":"342","endLine":1,"endColumn":19},{"ruleId":"339","severity":1,"message":"358","line":18,"column":25,"nodeType":"341","messageId":"342","endLine":18,"endColumn":42},{"ruleId":"400","severity":1,"message":"401","line":46,"column":30,"nodeType":"356","messageId":"402","endLine":46,"endColumn":32},{"ruleId":"400","severity":1,"message":"401","line":59,"column":30,"nodeType":"356","messageId":"402","endLine":59,"endColumn":32},{"ruleId":"359","severity":1,"message":"393","line":105,"column":8,"nodeType":"361","endLine":105,"endColumn":10,"suggestions":"403"},{"ruleId":"339","severity":1,"message":"404","line":6,"column":5,"nodeType":"341","messageId":"342","endLine":6,"endColumn":11},{"ruleId":"348","severity":1,"message":"349","line":17,"column":42,"nodeType":"350","messageId":"351","endLine":17,"endColumn":44},{"ruleId":"339","severity":1,"message":"374","line":1,"column":21,"nodeType":"341","messageId":"342","endLine":1,"endColumn":30},{"ruleId":"405","severity":1,"message":"406","line":26,"column":22,"nodeType":"407","messageId":"408","endLine":26,"endColumn":32,"fix":"409"},{"ruleId":"410","severity":1,"message":"411","line":26,"column":22,"nodeType":"407","messageId":"412","endLine":26,"endColumn":32},{"ruleId":"405","severity":1,"message":"406","line":23,"column":22,"nodeType":"407","messageId":"408","endLine":23,"endColumn":32,"fix":"413"},{"ruleId":"410","severity":1,"message":"411","line":23,"column":22,"nodeType":"407","messageId":"412","endLine":23,"endColumn":32},{"ruleId":"359","severity":1,"message":"414","line":36,"column":8,"nodeType":"361","endLine":36,"endColumn":34,"suggestions":"415"},{"ruleId":"359","severity":1,"message":"416","line":36,"column":9,"nodeType":"417","endLine":36,"endColumn":33},{"ruleId":"339","severity":1,"message":"374","line":1,"column":21,"nodeType":"341","messageId":"342","endLine":1,"endColumn":30},{"ruleId":"405","severity":1,"message":"406","line":22,"column":22,"nodeType":"407","messageId":"408","endLine":22,"endColumn":32,"fix":"418"},{"ruleId":"410","severity":1,"message":"411","line":22,"column":22,"nodeType":"407","messageId":"412","endLine":22,"endColumn":32},"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","no-native-reassign",["419"],"no-negated-in-lhs",["420"],"'setIsLogin' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useState' is defined but never used.","'updateUsers' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'updateDeviceTypes' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location.search'. Either include it or remove the dependency array.","ArrayExpression",["421"],"React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",["422"],"'Alert' is defined but never used.","'updatePositions' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["423"],"no-useless-computed-key","Unnecessarily computed property ['remember'] found.","Property","unnecessarilyComputedProperty",{"range":"424","text":"425"},"'ReactNode' is defined but never used.","'useCallback' is defined but never used.","'isIFrame' is defined but never used.",["426"],"React Hook useEffect has missing dependencies: 'form1' and 'form2'. Either include them or remove the dependency array.",["427"],"'MODE_TYPE' is defined but never used.",["419"],["420"],"'Table' is defined but never used.",["428"],"React Hook useMemo has a missing dependency: 'distinguish_mode'. Either include it or remove the dependency array.",["429"],"'Input' is defined but never used.","'updatePositionList' is assigned a value but never used.","'updateDeviceTypeList' is assigned a value but never used.","'List' is defined but never used.","'Option' is assigned a value but never used.","'handleEditFormProps' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'form1' and 'props.location.search'. Either include them or remove the dependency array.",["430"],"Unnecessarily computed property ['item_is_required'] found.",{"range":"431","text":"432"},"Unnecessarily computed property ['item_is_readonly'] found.",{"range":"433","text":"434"},"'FC' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected",["435"],"'Select' is defined but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"436","text":"437"},"no-new-object","The object literal notation {} is preferrable.","preferLiteral",{"range":"438","text":"437"},"React Hook useEffect has missing dependencies: 'dispatch', 'form', and 'name'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["439"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression",{"range":"440","text":"437"},"no-global-assign","no-unsafe-negation",{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},[1739,1751],"'remember'",{"desc":"441","fix":"447"},{"desc":"448","fix":"449"},{"desc":"441","fix":"450"},{"desc":"451","fix":"452"},{"desc":"453","fix":"454"},[12886,12906],"'item_is_required'",[12959,12979],"'item_is_readonly'",{"desc":"453","fix":"455"},[708,708],"()",[616,616],{"desc":"456","fix":"457"},[585,585],"Update the dependencies array to be: [props.location.search]",{"range":"458","text":"459"},"Update the dependencies array to be: [_state.orderId, _state.mode, _state.freshFlag, form]",{"range":"460","text":"461"},"Update the dependencies array to be: [props.history]",{"range":"462","text":"463"},{"range":"464","text":"459"},"Update the dependencies array to be: [_state.mode, _state.serialNo, _state.Id, form1, form2]",{"range":"465","text":"466"},{"range":"467","text":"459"},"Update the dependencies array to be: [distinguish_mode]",{"range":"468","text":"469"},"Update the dependencies array to be: [form1, props.location.search]",{"range":"470","text":"471"},{"range":"472","text":"471"},"Update the dependencies array to be: [dispatch, form, name]",{"range":"473","text":"474"},[5134,5136],"[props.location.search]",[6474,6521],"[_state.orderId, _state.mode, _state.freshFlag, form]",[1494,1496],"[props.history]",[6563,6565],[7286,7327],"[_state.mode, _state.serialNo, _state.Id, form1, form2]",[3150,3152],[3641,3647],"[distinguish_mode]",[8571,8573],"[form1, props.location.search]",[3838,3840],[903,929],"[dispatch, form, name]"]